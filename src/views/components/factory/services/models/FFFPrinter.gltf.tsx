/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three';
import React, { useRef, useState, useEffect } from 'react';
import { useLoader } from 'react-three-fiber';
import { GLTFLoader, GLTF } from 'three/examples/jsm/loaders/GLTFLoader';

type GLTFResult = GLTF & {
  nodes: {
    mergedBlocks_1_0: THREE.Mesh;
    mergedBlocks_1_1: THREE.Mesh;
    mergedBlocks_1_2: THREE.Mesh;
    mergedBlocks_1_3: THREE.Mesh;
  };

  materials: {
    custom2: THREE.MeshStandardMaterial;
    custom1: THREE.MeshStandardMaterial;
    custom3: THREE.MeshStandardMaterial;
    _defaultMat: THREE.MeshStandardMaterial;
  };
};

export default function Model(props: JSX.IntrinsicElements['group'] | any) {
  const group = useRef<THREE.Group>();
  const { model } = props;

  // New From Model Data
  const [gltf, setgltf] = useState<any | undefined>(undefined);
  const [newNodes, setNewNodes] = useState<any | undefined>(undefined);
  const [newMaterials, setNewMaterials] = useState<any | undefined>(undefined);

  useEffect(() => {
    const loadGLTF = async () => {
      // Option 1
      const loader = new GLTFLoader();
      // We are just assuming a single chunk
      loader.parse(model[0], '', (gltf: GLTF) => {
        setgltf(gltf);
      });

      // Option 2
      //const { nodes, materials } = useLoader<GLTFResult>(GLTFLoader, model[0]);
      //newNodes(nodes);
      //newMaterials(materials);
    };
    loadGLTF();
  }, [model]);

  //const { nodes: newNodes, materials: newMaterials } = useLoader<GLTFResult>(
  //  GLTFLoader,
  //  model[0],
  //  (loader: any) => loader.parse(model[0])
  //);

  // Original
  const { nodes, materials } = useLoader<GLTFResult>(
    GLTFLoader,
    '/FFFPrinter.gltf'
  );

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        material={materials.custom2}
        geometry={nodes.mergedBlocks_1_0.geometry}
      />
      <mesh
        material={materials.custom1}
        geometry={nodes.mergedBlocks_1_1.geometry}
      />
      <mesh
        material={materials.custom3}
        geometry={nodes.mergedBlocks_1_2.geometry}
      />
      <mesh
        material={materials._defaultMat}
        geometry={nodes.mergedBlocks_1_3.geometry}
      />
    </group>
  );
}
