/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';
import { useIpfsGltfLoader } from '../../../../../store/ipfs/use-ipfs-gltf-loader';
import { ModelProxy } from './ModelProxy';

type GLTFResult = GLTF & {
  nodes: {
    mergedBlocks: THREE.Mesh;
  };
  materials: {
    _defaultMat: THREE.MeshStandardMaterial;
  };
};

export default function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>();

  const result = useIpfsGltfLoader<GLTFResult>(
    'QmQZDpCFgiUtZwzi3UUKWUHUS44kqA25z8SKoo98MrLaPS'
  );

  /*const { nodes, materials } = useLoader<GLTFResult>(
    GLTFLoader,
    '/HumanWorker.gltf'
  );*/

  if (result) {
    const { nodes, materials } = result;
    return (
      <group ref={group} {...props} dispose={null}>
        <mesh
          material={materials._defaultMat}
          geometry={nodes.mergedBlocks.geometry}
        />
      </group>
    );
  } else {
    return ModelProxy();
  }
}
