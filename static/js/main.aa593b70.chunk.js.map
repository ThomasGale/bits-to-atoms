{"version":3,"sources":["store/textile/slice.ts","store/textile/factories.ts","store/textile/user-identity-sagas.ts","env/config.ts","store/common/topology/types.ts","store/common/identity/factories.ts","store/economic/factories.ts","store/material/types.ts","store/material/factories.ts","store/buildrequest/factories.ts","store/workflow/types.ts","store/factory/schemas.ts","store/factory/services/types.ts","store/factory/selectors.ts","store/common/primitive/factories.ts","store/factory/services/factories.ts","store/factory/services/dispatchservice/factories.ts","store/factory/services/fffprinter/factories.ts","store/factory/services/floorspace/factories.ts","store/factory/services/humanworker/factories.ts","store/factory/services/procurementservice/factories.ts","store/factory/slice.ts","store/factory/factories.ts","store/market/selectors.ts","store/market/slice.ts","store/market/sagas.ts","store/selected/types.ts","store/selected/slice.ts","store/workflow/factories.ts","store/factory/sagas.ts","store/factory/services/procurementservice/sagas.ts","store/factory/services/humanworker/sagas.ts","store/factory/services/fffprinter/sagas.ts","store/factory/services/dispatchservice/sagas.ts","store/factory/services/sagas.ts","store/information/slice.ts","store/index.ts","store/textile/selectors.ts","store/information/selectors.ts","store/selected/selectors.ts","views/components/buildrequest/ActivityDetails.tsx","views/components/buildrequest/BuildRequestDetails.tsx","store/factory/camera/selectors.ts","views/components/factory/camera/SmoothOrbitCamera.tsx","views/components/factory/cursor/GridHoverCursor.tsx","views/components/factory/base/Lighting.tsx","views/components/factory/base/BasePlane.tsx","views/components/factory/services/FloorSpace.tsx","store/ipfs/IpfsContext.ts","store/ipfs/use-ipfs-gltf-loader.ts","views/components/factory/services/models/ModelProxy.tsx","views/components/factory/services/models/HumanWorker.gltf.tsx","views/components/factory/services/HumanWorker.tsx","views/components/factory/services/models/FFFPrinter.gltf.tsx","views/components/factory/services/FFFPrinter.tsx","views/components/factory/services/Procurement.tsx","views/components/factory/services/Dispatch.tsx","views/components/factory/services/ServiceProvider.tsx","views/components/factory/Factory.tsx","views/components/factory/panel/ActiveBuildRequestsSummary.tsx","views/components/factory/panel/FactoryEconomicSummary.tsx","views/components/factory/FactoryPanel.tsx","views/components/information/InformationOverlay.tsx","views/components/textile/UserDetailsOverlay.tsx","views/components/market/BuildRequestSummary.tsx","views/components/market/MarketPanel.tsx","views/components/selected/form/entity/IdentityForm.tsx","store/common/parameter/types.ts","store/common/parameter/factories.ts","views/components/selected/form/parameter/BasicParameter.tsx","views/components/selected/form/entity/LocationForm.tsx","views/components/selected/form/entity/OrientationForm.tsx","views/components/selected/SelectedPanel.tsx","views/components/TopNav.tsx","store/ipfs/use-ipfs-factory.ts","views/components/App.tsx","views/theme.ts","serviceWorker.ts","index.tsx"],"names":["textileSlice","createSlice","name","initialState","detailsVisible","user","undefined","createTextile","reducers","showUserDetails","state","_","hideUserDetails","setUser","action","payload","actions","textileReducer","reducer","generateIdentitySaga","console","log","privateKey","PrivateKey","fromRandom","put","BasicShape","config","topNav","gitHubURL","information","gitHubAPILatestReleaseEndPoint","market","simpleMarketSaga","partNames","partValueRange","min","max","maxNumberOpenRequests","processingDelayRange","factory","updatePeriodMs","maxNumberActiveBuilds","createUuid","uuidv4","MaterialType","dollarFormatter","Intl","NumberFormat","style","currency","createLiquidAsset","id","displayName","value","dollars","createSimplePolymerMaterial","costPerMass","type","SimplePolymer","createBuildRequest","created","Date","material","endShape","Cube","scale","fixedValue","workflow","ActivityType","TransmutationStateType","assetSchema","schema","Entity","serviceProviderSchema","activitySchema","serviceProvider","define","previousActivity","nextActivity","ServiceType","workflowSchema","activities","firstActivity","factorySchema","liquidAsset","fixedAssets","serviceProviders","buildRequests","factoryEntitiesServiceProvidersSelector","entities","factoryIdentitySelector","createSelector","result","factoryId","factoryDisplayName","factoryLiquidAssetSelector","assets","factoryLiquidAssetId","factoryEntitiesAssets","denormalize","factoryBuildRequestsSelector","workflows","factoryBuildRequestsIds","factoryEntitiesActivities","factoryEntitiesBuildRequests","factoryEntitiesServiceProviders","factoryEntitiesWorkflows","isAllowedToBidSelector","factoryActiveBuildRequests","length","factoryServiceProvidersSelector","factoryServiceProvidersIds","currentServiceProviderCostPerTimeSelector","factoryServiceProviders","filter","sp","capabilities","find","cap","Transmutation","currentServiceProvidersCostPerSecond","forEach","p","currentCostPerTime","factoryEconomicSummarySelector","currentAssetsValue","totalOut","totalIn","createVector3","x","y","z","createQuaternion","w","createCuboid","createBasicShapeTransmutationState","shape","BasicShapeType","createLiquidAssetTransmutationState","LiquidAssetType","createTransmutationTransition","start","end","createDispatchService","canBid","currentActivity","location","orientation","bounds","supportedTransmutationTransitions","Cylinder","supportedMaterials","outputVolume","Dispatch","createFFFPrinter","Spool","RoughCube","RoughCylinder","FFFPrinter","createFloorSpace","Storage","Floorspace","createHumanWorker","Transportation","capactityMass","movementVelocity","HumanWorker","createProcurementService","Procurement","factorySlice","normalize","createFactory","setDisplayName","setLiquidAssetDollars","addBuildRequest","updateBuildRequestWorkflow","normalizedWorkflow","buildRequestId","requestFullfillmentOfActivity","_state","_action","offerFullfillmentOfActivity","acceptFullfillmentOfActivity","updateActivity","normalizedActivity","removeBuildRequest","error","setServiceProviderParameter","serviceProviderId","serviceProviderProperty","parameter","factoryReducer","marketSelector","buildRequestsSelector","visible","marketSlice","requestBidBuildRequest","push","indexToRemove","findIndex","el","splice","marketReducer","buildRequestBidSaga","watchRequestAddBuildRequestSaga","getRandomPartName","Math","floor","random","getRandomFromIntRange","select","oldestBuildRequest","reduce","prev","curr","addBuildRequestToMarket","delay","requestBidBuildRequestAction","buildRequest","addBuildRequestToFactory","takeEvery","MarketFactoryPanelVisibilty","selectedSlice","marketFactoryPanelVisibilty","Market","primaryFocusBuildRequestId","selectedServiceProviderId","setMarketFactoryPanelVisibilty","unSelectPrimaryFocusBuildRequest","setSelectedPrimaryFocusBuildRequest","unSelectServiceProvider","setSelectedServiceProvider","selectedReducer","createTransportationActivity","started","completed","startLocation","endLocation","createTransmutationActivity","startState","endState","createWorkflow","factoryUpdateTickSaga","triggerRequestFullfillmentOfActivity","buildRequestWorkflowSaga","factoryWatchAddActiveBuildRequestSaga","updateDelayMs","currentLiquidAsset","currentServiceProviderCostPerTime","currentServiceProviderCostOverPeriod","activity","take","fullfillmentOffer","addedActiveBuildRequest","computedWorkflow","currentTopologyState","currentTransmutationActivity","dispatchOfferServiceProvider","previousTransmutationActivity","transmutationFullfillmentOffer","proposedServiceProvider","proposedActivity","startTransmutationServiceProvider","endTransmutationServiceProvider","currentTransportActivity","transportationFullfillmentOffer","proposedTransportServiceProvider","currentExecutingActivity","updateActivityAction","generateBidWorkflow","executeActivityWorkflow","watchRequestFufillmentOfActivitySaga","watchAcceptFullfillmentOfActivitySaga","requestFufillmentOfActivity","procurementServiceProviders","availableProcurementServiceProviders","psp","procurementServiceProvider","warn","chosenTopologyTransition","transition","executeTransportationActivity","executeTransmutationActivity","humanServiceProviders","availableHumanServiceProviders","hsp","humanServiceProvider","humanWorker","transportationActivity","transmutationActivity","fffPrinterServiceProviders","availableFFFPrinterServiceProviders","fffpsp","fffPrinterServiceProvider","dispatchServiceProviders","availableDispatchServiceProviders","dispatchServiceProvider","serviceProvidersWatchFactoryOpenActivitiesSaga","serviceProvidersWatchAcceptFullfillmentOfActivitiesSaga","all","fork","procurementWatchRequestFufillmentOfActivitySaga","humanWorkerWatchRequestFufillmentOfActivitySaga","fffPrinterWatchRequestFufillmentOfActivitySaga","dispatchWatchRequestFufillmentOfActivitySaga","procurementWatchAcceptFullfillmentOfActivitySaga","humanWorkerWatchAcceptFullfillmentOfActivitySaga","fffPrinterWatchAcceptFullfillmentOfActivitySaga","dispatchWatchAcceptFullfillmentOfActivitySaga","informationSlice","informationOverlayVisible","showInformationOverlay","hideInformationOverlay","informationReducer","rootSaga","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","textile","selected","form","formReducer","store","configureStore","middleware","run","userIdentityDetailsOverlayVisibleSelector","userIdentityPublicKeySelector","toString","informationOverlayVisibleSelector","selectedSelector","marketFactoryPanelVisibiltySelector","primaryFocusBuildRequestIdSelector","primaryFocusBuildRequestSelector","factoryBuildRequests","br","primaryFocusBuildRequestWorkflowSelector","primaryFocusBuildRequest","primaryFocusBuildRequestOrderedActivitiesSelector","primaryFocusBuildRequestWorkflow","orderedActivities","selectedServiceProviderIdSelector","selectedServiceProviderSelector","selectedServiceProviderEntitySelector","selectedServiceProvider","selectedServiceProviderLocationSelector","selectedServiceProviderEntity","selectedServiceProviderOrientationSelector","connector","connect","_dispatch","useStyles","makeStyles","theme","container","padding","spacing","title","fontSize","subTitle","marginBottom","footer","marginTop","props","classes","Card","className","Typography","color","gutterBottom","toLocaleTimeString","dispatch","onCloseClicked","margin","flexGrow","overflow","maxHeight","internalContainer","pos","CardContent","CardActions","Button","size","onClick","WorkflowsCardContent","variant","component","map","key","Box","selectedEntityCameraTargetSelector","position","THREE","lookAt","screenSpaceBounds","SmoothOrbitCamera","useThree","gl","camera","up","set","orbitRef","useRef","cameraTarget","useState","cameraMoving","setCameraMoving","useSpring","springyCameraPos","springyCameraLookAt","current","target","onStart","onRest","useFrame","cameraPos","getValue","cameraLookAt","update","ref","args","domElement","maxPolarAngle","PI","extend","OrbitControls","GridHoverCursor","gridSize","mesh","Vector3","setTarget","useMemo","springycursorPostion","attach","Lighting","intensity","castShadow","Color","angle","penumbra","shadow-mapSize-width","shadow-mapSize-height","BasePlane","largeX","largeY","onHover","onSelected","receiveShadow","onPointerMove","e","stopPropagation","FloorSpaceElement","floorSpace","Euler","eulerRotation","setEulerRotation","newEuler","setFromQuaternion","ThreeQuaternion","thickness","rotation","IpfsContext","React","createContext","blackList","prune","reducedProps","Object","keys","geometry","useIpfsGltfLoader","modelCID","ipfs","useContext","model","setModel","useEffect","downloadModel","a","chunks","cat","chunk","setResult","GLTFLoader","parse","gltf","temp","nodes","materials","scene","traverse","obj","loadGLTF","ModelProxy","Model","group","dispose","_defaultMat","mergedBlocks","HumanWorkerElement","fallback","custom2","mergedBlocks_1_0","custom1","mergedBlocks_1_1","custom3","mergedBlocks_1_2","mergedBlocks_1_3","FFFPrinterElement","fffPrinter","ProcurementElement","procurementService","DispatchElement","dispatchService","servicesProviders","onBasePlaneSelected","onInputRegionSelected","onOutputRegionSelected","cursorPostion","setCursorPosition","Consumer","shadowMap","Provider","point","servicesProvider","ServiceProvider","isAllowedToBid","onActiveBuildRequestSelected","_theme","comment","activeBuildRequests","activeBuildRequest","factoryEconomicSummary","format","factoryIdentity","None","InformationOverlay","width","info","setInfo","axios","status","releaseResponse","data","body","fetchData","source","UserDetailsOverlay","userIdentityPublicKey","onBidClicked","root","Grid","direction","justify","alignItems","item","disabled","card","paddingRight","panelProps","elementHeight","cumulativeHeight","transBuildRequests","useTransition","height","from","opacity","leave","enter","tension","div","transform","interpolate","ParameterType","createNumberParameter","units","Number","field","BasicParameter","input","TextField","label","initialValues","onNumberParameterChange","parameterUpdate","reduxForm","enableReinitialize","fixedProps","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","xs","Field","toUpperCase","onChange","change","onFactoryClicked","Factory","onMarketClicked","onShowInfoPanel","onShowUserInfo","menuButton","marginRight","AppBar","Toolbar","IconButton","edge","aria-label","href","userIdentityDetailsOverlayVisible","onHideInfoPanel","onHideUserDetailsPanel","backgroundColor","outline","fullScreen","backdrop","zIndex","drawer","pointerEvents","uiOverlay","top","left","right","uiPrimaryGridContainer","uiPrimaryGridElement","Boolean","isIpfsReady","setIpfsReady","ipfsInitError","setIpfsInitError","time","Ipfs","create","timeEnd","startIpfs","stop","catch","err","useIpfsFactory","MarketFactoryPanel","PrimaryFocusPanel","Backdrop","open","createMuiTheme","palette","primary","main","secondary","red","A400","background","default","window","hostname","match","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.aa593b70.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { createTextile } from './factories';\nimport { User } from './types';\n\nconst textileSlice = createSlice({\n  name: 'textile',\n  initialState: createTextile(),\n  reducers: {\n    showUserDetails(state, _: PayloadAction) {\n      state.detailsVisible = true;\n    },\n    hideUserDetails(state, _: PayloadAction) {\n      state.detailsVisible = false;\n    },\n    setUser(state, action: PayloadAction<User>) {\n      state.user = action.payload;\n    },\n  },\n});\n\nexport const {\n  showUserDetails,\n  hideUserDetails,\n  setUser,\n} = textileSlice.actions;\n\nexport const textileReducer = textileSlice.reducer;\n","import { Textile, User } from './types';\n\nexport const createTextile = ({\n  detailsVisible = false,\n  user = undefined as undefined | User,\n} = {}): Textile => {\n  return {\n    detailsVisible,\n    user,\n  };\n};\n","import { PrivateKey } from '@textile/hub';\nimport { put } from 'redux-saga/effects';\nimport { setUser } from './slice';\n/**\n * Runs a simple fixed market simulation.\n * Parts are randomly added and removed after a certain time.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function* generateIdentitySaga() {\n  console.log('Generating user identity...');\n\n  const privateKey: PrivateKey = PrivateKey.fromRandom();\n\n  /** Convert to string. */\n  //const identityString = identity.toString();\n\n  /** Restore an identity object from a string */\n  //const restored = PrivateKey.fromString(identityString);\n\n  yield put(\n    setUser({\n      privateKey,\n    })\n  );\n\n  //console.log('Complete generating user identity: ' + privateKey.pubKey);\n}\n","export const config = {\n  topNav: {\n    gitHubURL: 'https://github.com/thomas-gale/bits-to-atoms',\n  },\n  information: {\n    gitHubAPILatestReleaseEndPoint:\n      'https://api.github.com/repos/thomas-gale/bits-to-atoms/releases/latest',\n  },\n  market: {\n    simpleMarketSaga: {\n      partNames: [\n        'widget',\n        'thingy',\n        'thingybob',\n        'whatchamacallit',\n        'thingamajig',\n        'doohickey',\n        'doofery',\n        'thatthing',\n      ],\n      partValueRange: {\n        min: 5,\n        max: 10,\n      },\n      maxNumberOpenRequests: 3,\n      processingDelayRange: {\n        min: 10000,\n        max: 20000,\n      },\n    },\n  },\n  factory: {\n    updatePeriodMs: 1000,\n    maxNumberActiveBuilds: 1,\n  },\n};\n","/**\n * Highly simplified set of basic shapes\n * for factory MVP 1.0\n */\nexport enum BasicShape {\n  Spool = 'Spool',\n  RoughCube = 'RoughCube',\n  Cube = 'Cube',\n  RoughCylinder = 'RoughCylinder',\n  Cylinder = 'Cylinder',\n}\n","import { v4 as uuidv4 } from 'uuid';\n\nexport function createUuid() {\n  return uuidv4();\n}\n","import { createUuid } from '../common/identity/factories';\nimport { LiquidAsset } from './types';\n\nexport const dollarFormatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n});\n\nexport function createLiquidAsset({\n  id = createUuid(),\n  displayName = 'default-liquid-asset',\n  value = { dollars: 500 },\n} = {}): LiquidAsset {\n  return {\n    id,\n    displayName,\n    value,\n  };\n}\n","import { LiquidAsset } from '../economic/types';\n\nexport enum MaterialType {\n  SimplePolymer = 'SimplePolymer',\n}\n\nexport interface Material {\n  type: MaterialType;\n  costPerMass: LiquidAsset;\n}\n","import { MaterialType, Material } from './types';\nimport { createLiquidAsset } from '../economic/factories';\n\nexport function createSimplePolymerMaterial({\n  costPerMass = createLiquidAsset({ value: { dollars: 10 } }),\n} = {}): Material {\n  return {\n    type: MaterialType.SimplePolymer,\n    costPerMass,\n  };\n}\n","import { BasicShape } from '../common/topology/types';\nimport { BuildRequest } from './types';\nimport { Workflow } from '../workflow/types';\nimport { createUuid } from '../common/identity/factories';\nimport { createLiquidAsset } from '../economic/factories';\nimport { createSimplePolymerMaterial } from '../material/factories';\n\nexport function createBuildRequest({\n  id = createUuid(),\n  displayName = 'default-build-request',\n  created = new Date(),\n  material = createSimplePolymerMaterial(),\n  endShape = BasicShape.Cube,\n  scale = 1e-2,\n  fixedValue = createLiquidAsset({ value: { dollars: 20 } }),\n  workflow = undefined as Workflow | undefined,\n} = {}): BuildRequest {\n  return {\n    id,\n    displayName,\n    created,\n    material,\n    endShape,\n    scale,\n    fixedValue,\n    workflow,\n  };\n}\n","import { Identity } from '../common/identity/types';\nimport { Vector3 } from '../common/primitive/types';\nimport { BasicShape } from '../common/topology/types';\nimport { MaterialType } from '../material/types';\nimport { LiquidAsset } from '../economic/types';\nimport { ServiceProvider } from '../factory/services/types';\n\nexport enum ActivityType {\n  Transportation = 'Transportation',\n  Transmutation = 'Transmutation',\n  Storage = 'Storage',\n}\n\ninterface BaseActivity extends Identity {\n  type: ActivityType;\n  serviceProvider: ServiceProvider | undefined;\n  started: Date | undefined;\n  completed: Date | undefined;\n  previousActivity: Activity | undefined;\n  nextActivity: Activity | undefined;\n}\n\nexport interface TransportationActivity extends BaseActivity {\n  type: ActivityType.Transportation;\n  startLocation: Vector3;\n  endLocation: Vector3;\n}\n\nexport enum TransmutationStateType {\n  BasicShapeType = 'BasicShapeType',\n  LiquidAssetType = 'LiquidAssetType',\n}\n\nexport interface BasicShapeTransmutationState {\n  type: TransmutationStateType.BasicShapeType;\n  shape: BasicShape;\n}\n\nexport interface LiquidAssetTransmutationState {\n  type: TransmutationStateType.LiquidAssetType;\n  liquidAsset: LiquidAsset;\n}\n\nexport type TransmutationState =\n  | BasicShapeTransmutationState\n  | LiquidAssetTransmutationState;\n\nexport interface TransmutationActivity extends BaseActivity {\n  type: ActivityType.Transmutation;\n  material: MaterialType;\n  startState: TransmutationState | undefined;\n  endState: TransmutationState | undefined;\n}\n\nexport interface StorageActivity extends BaseActivity {\n  type: ActivityType.Storage;\n  location: Vector3;\n}\n\nexport type Activity =\n  | TransportationActivity\n  | TransmutationActivity\n  | StorageActivity;\n\nexport interface Workflow extends Identity {\n  activities: Activity[];\n  firstActivity: Activity | undefined;\n}\n","import { schema, NormalizedSchema } from 'normalizr';\n\n// Test placing all schemes here. They will need moving to correct directories.\nexport const assetSchema = new schema.Entity('assets');\n\nexport const serviceProviderSchema = new schema.Entity('serviceProviders');\n\nexport const activitySchema = new schema.Entity(\n  'activities',\n  {\n    serviceProvider: serviceProviderSchema,\n  },\n  {}\n);\nactivitySchema.define({\n  previousActivity: activitySchema,\n  nextActivity: activitySchema,\n});\n\nexport const workflowSchema = new schema.Entity(\n  'workflows',\n  {\n    activities: [activitySchema],\n    firstActivity: activitySchema,\n  },\n  {}\n);\n\nexport const buildRequestSchema = new schema.Entity(\n  'buildRequests',\n  {\n    workflow: workflowSchema,\n    firstActivity: activitySchema,\n  },\n  {}\n);\n\nexport const factorySchema = {\n  liquidAsset: assetSchema,\n  fixedAssets: [assetSchema],\n  serviceProviders: [serviceProviderSchema],\n  buildRequests: [buildRequestSchema],\n};\n\nexport type FactorySchemaType = NormalizedSchema<\n  {\n    [key: string]:\n      | {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          [key: string]: any;\n        }\n      | undefined;\n  },\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  any\n>;\n","import { Entity } from '../entity/types';\nimport { MaterialType } from '../../material/types';\nimport { Cuboid } from '../../common/primitive/types';\nimport { LiquidAsset } from '../../economic/types';\nimport {\n  ActivityType,\n  Activity,\n  TransmutationState,\n} from '../../workflow/types';\n\nexport enum ServiceType {\n  Procurement = 'Procurement',\n  Floorspace = 'Floorspace',\n  HumanWorker = 'HumanWorker',\n  FFFPrinter = 'FFFPrinter',\n  Dispatch = 'Dispatch',\n}\n\n// This any is required to allow arbitary mapping from Serivce provider parameters in UI forms to object values.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ninterface BaseServiceProvider extends Entity<any> {\n  type: ServiceType;\n  capabilities: ActivityType[];\n  canBid: boolean;\n  currentActivity: Activity | undefined;\n  currentCostPerTime: LiquidAsset;\n}\n\nexport interface TransmutationTransition {\n  start: TransmutationState;\n  end: TransmutationState;\n}\n\nexport interface TransmutationServiceProvider extends BaseServiceProvider {\n  supportedTransmutationTransitions: TransmutationTransition[];\n  supportedMaterials: MaterialType[];\n  outputVolume: Cuboid | undefined;\n}\n\nexport interface TransportServiceProvider extends BaseServiceProvider {\n  capactityMass: number;\n  movementVelocity: number;\n}\n\nexport type StorageServiceProvider = BaseServiceProvider;\n\nexport type ServiceProvider =\n  | TransmutationServiceProvider\n  | TransportServiceProvider\n  | StorageServiceProvider;\n","import { denormalize } from 'normalizr';\nimport { createSelector } from 'reselect';\nimport { config } from '../../env/config';\nimport { BuildRequest } from '../buildrequest/types';\nimport { Identity } from '../common/identity/types';\nimport { createLiquidAsset } from '../economic/factories';\nimport { EconomicSummary, LiquidAsset } from '../economic/types';\nimport { RootState } from '../index';\nimport { ActivityType } from '../workflow/types';\nimport { factorySchema, FactorySchemaType } from './schemas';\nimport {\n  ServiceProvider,\n  TransmutationServiceProvider,\n} from './services/types';\n\n/*export const factorySelector = (state: RootState): FactorySchemaType =>\n  state.factory;*/\n\nconst factoryIdSelector = (state: RootState) =>\n  state.factory.result.id as string | undefined;\nconst factoryDisplayNameSelector = (state: RootState) =>\n  state.factory.result.displayName as string | undefined;\nconst factoryLiquidAssetIdSelector = (state: RootState) =>\n  state.factory.result.liquidAsset as string | undefined;\n//const factoryFixedAssetsIdsSelector = (state: RootState) =>\n//  state.factory.result.fixedAssets as string[] | undefined;\nconst factoryBuildRequestsIdsSelector = (state: RootState) =>\n  state.factory.result.buildRequests as string[] | undefined;\nconst factoryServiceProvidersIdsSelector = (state: RootState) =>\n  state.factory.result.serviceProviders as string[] | undefined;\n\nconst factoryEntitiesActivitiesSelector = (state: RootState) =>\n  state.factory.entities.activities as FactorySchemaType | undefined;\nconst factoryEntitiesAssetsSelector = (state: RootState) =>\n  state.factory.entities.assets as FactorySchemaType | undefined;\nconst factoryEntitiesBuildRequestsSelector = (state: RootState) =>\n  state.factory.entities.buildRequests as FactorySchemaType | undefined;\nconst factoryEntitiesServiceProvidersSelector = (state: RootState) =>\n  state.factory.entities.serviceProviders as FactorySchemaType | undefined;\nconst factoryEntitiesWorkflowsSelector = (state: RootState) =>\n  state.factory.entities.workflows as FactorySchemaType | undefined;\n\nexport const factoryIdentitySelector = createSelector(\n  [factoryIdSelector, factoryDisplayNameSelector],\n  (factoryId: string | undefined, factoryDisplayName: string | undefined) => {\n    return {\n      id: factoryId ? factoryId : 'undefined',\n      displayName: factoryDisplayName ? factoryDisplayName : 'undefined',\n    } as Identity;\n  }\n);\n\nexport const factoryLiquidAssetSelector = createSelector(\n  [factoryLiquidAssetIdSelector, factoryEntitiesAssetsSelector],\n  (\n    factoryLiquidAssetId: string | undefined,\n    factoryEntitiesAssets: FactorySchemaType | undefined\n  ): LiquidAsset => {\n    return denormalize(\n      {\n        liquidAsset: factoryLiquidAssetId,\n      },\n      factorySchema,\n      {\n        assets: factoryEntitiesAssets,\n      }\n    ).liquidAsset as LiquidAsset;\n  }\n);\n\nexport const factoryBuildRequestsSelector = createSelector(\n  [\n    factoryBuildRequestsIdsSelector,\n    factoryEntitiesActivitiesSelector,\n    factoryEntitiesBuildRequestsSelector,\n    factoryEntitiesServiceProvidersSelector,\n    factoryEntitiesWorkflowsSelector,\n  ],\n  (\n    factoryBuildRequestsIds: string[] | undefined,\n    factoryEntitiesActivities: FactorySchemaType | undefined,\n    factoryEntitiesBuildRequests: FactorySchemaType | undefined,\n    factoryEntitiesServiceProviders: FactorySchemaType | undefined,\n    factoryEntitiesWorkflows: FactorySchemaType | undefined\n  ): BuildRequest[] => {\n    return denormalize(\n      {\n        buildRequests: factoryBuildRequestsIds,\n      },\n      factorySchema,\n      {\n        activities: factoryEntitiesActivities,\n        buildRequests: factoryEntitiesBuildRequests,\n        serviceProviders: factoryEntitiesServiceProviders,\n        workflows: factoryEntitiesWorkflows,\n      }\n    ).buildRequests as BuildRequest[];\n  }\n);\n\nexport const isAllowedToBidSelector = createSelector(\n  [factoryBuildRequestsSelector],\n  (factoryActiveBuildRequests: BuildRequest[]) => {\n    return (\n      factoryActiveBuildRequests.length < config.factory.maxNumberActiveBuilds\n    );\n  }\n);\n\nexport const factoryServiceProvidersSelector = createSelector(\n  [factoryServiceProvidersIdsSelector, factoryEntitiesServiceProvidersSelector],\n  (\n    factoryServiceProvidersIds: string[] | undefined,\n    factoryEntitiesServiceProviders: FactorySchemaType | undefined\n  ): ServiceProvider[] => {\n    return denormalize(\n      {\n        serviceProviders: factoryServiceProvidersIds,\n      },\n      factorySchema,\n      {\n        serviceProviders: factoryEntitiesServiceProviders,\n      }\n    ).serviceProviders as ServiceProvider[];\n  }\n);\n\nexport const factoryTransmutationServiceProvidersSelector = createSelector(\n  [factoryServiceProvidersSelector],\n  (\n    factoryServiceProviders: ServiceProvider[]\n  ): TransmutationServiceProvider[] => {\n    return factoryServiceProviders.filter(\n      (sp) =>\n        sp.capabilities.find((cap) => cap === ActivityType.Transmutation) !==\n        undefined\n    ) as TransmutationServiceProvider[];\n  }\n);\n\nexport const currentServiceProviderCostPerTimeSelector = createSelector(\n  [factoryServiceProvidersSelector],\n  (serviceProviders: ServiceProvider[]): LiquidAsset => {\n    let currentServiceProvidersCostPerSecond = 0;\n    serviceProviders.forEach((p) => {\n      currentServiceProvidersCostPerSecond +=\n        p.currentCostPerTime.value.dollars;\n    });\n    return createLiquidAsset({\n      value: { dollars: currentServiceProvidersCostPerSecond },\n    });\n  }\n);\n\n/**\n * WIP: This could do with a spot of work figuring out the total in / out metric\n * Should this be an average rate over a fixed period (e.g. 1 / 5 / 10min)?\n */\nexport const factoryEconomicSummarySelector = createSelector(\n  [factoryLiquidAssetSelector, factoryServiceProvidersSelector],\n  (\n    liquidAsset: LiquidAsset,\n    serviceProviders: ServiceProvider[]\n  ): EconomicSummary => {\n    // Compute total asset value\n    /*const currentAssetsValue = assets.reduce((prev, curr) => {\n      return { dollars: prev.dollars + curr.dollars };\n    });*/\n\n    // Compute total service provider cost per second\n    let currentServiceProvidersCostPerSecond = 0;\n    serviceProviders.forEach((p) => {\n      currentServiceProvidersCostPerSecond +=\n        p.currentCostPerTime.value.dollars;\n    });\n\n    return {\n      currentAssetsValue: liquidAsset,\n      totalOut: createLiquidAsset({\n        value: { dollars: currentServiceProvidersCostPerSecond },\n      }),\n      totalIn: createLiquidAsset({ value: { dollars: 0 } }),\n    };\n  }\n);\n","import { Vector3, Quaternion, Cuboid } from './types';\n\nexport function createVector3({ x = 0, y = 0, z = 0 } = {}): Vector3 {\n  return {\n    x,\n    y,\n    z,\n  };\n}\n\nexport function createQuaternion({\n  x = 0,\n  y = 0,\n  z = 0,\n  w = 1,\n} = {}): Quaternion {\n  return {\n    x,\n    y,\n    z,\n    w,\n  };\n}\n\nexport function createCuboid({\n  min = createVector3(),\n  max = createVector3({ x: 1, y: 1, z: 1 }),\n} = {}): Cuboid {\n  return {\n    min,\n    max,\n  };\n}\n","import { BasicShape } from '../../common/topology/types';\nimport {\n  BasicShapeTransmutationState,\n  TransmutationStateType,\n  LiquidAssetTransmutationState,\n  TransmutationState,\n} from '../../workflow/types';\nimport { TransmutationTransition } from './types';\nimport { createLiquidAsset } from '../../economic/factories';\n\nexport function createBasicShapeTransmutationState({\n  shape = BasicShape.Cube,\n} = {}): BasicShapeTransmutationState {\n  return {\n    type: TransmutationStateType.BasicShapeType,\n    shape,\n  };\n}\n\nexport function createLiquidAssetTransmutationState({\n  liquidAsset = createLiquidAsset(),\n} = {}): LiquidAssetTransmutationState {\n  return {\n    type: TransmutationStateType.LiquidAssetType,\n    liquidAsset,\n  };\n}\n\nexport function createTransmutationTransition({\n  start = createBasicShapeTransmutationState() as TransmutationState,\n  end = createBasicShapeTransmutationState() as TransmutationState,\n} = {}): TransmutationTransition {\n  return {\n    start,\n    end,\n  };\n}\n","import { ServiceType } from '../types';\nimport { DispatchService } from './types';\n\nimport { createUuid } from '../../../common/identity/factories';\nimport {\n  createVector3,\n  createQuaternion,\n  createCuboid,\n} from '../../../common/primitive/factories';\nimport { createLiquidAsset } from '../../../economic/factories';\nimport { ActivityType } from '../../../workflow/types';\nimport { BasicShape } from '../../../common/topology/types';\nimport { MaterialType } from '../../../material/types';\nimport {\n  createTransmutationTransition,\n  createBasicShapeTransmutationState,\n  createLiquidAssetTransmutationState,\n} from '../factories';\n\nexport function createDispatchService({\n  id = createUuid(),\n  displayName = 'default-dispatch-service',\n  capabilities = [ActivityType.Transmutation],\n  canBid = true,\n  currentActivity = undefined,\n  location = createVector3(),\n  orientation = createQuaternion(),\n  bounds = createCuboid(),\n  currentCostPerTime = createLiquidAsset({ value: { dollars: 1e-6 } }),\n  supportedTransmutationTransitions = [\n    createTransmutationTransition({\n      start: createBasicShapeTransmutationState({ shape: BasicShape.Cube }),\n      end: createLiquidAssetTransmutationState({\n        liquidAsset: createLiquidAsset({ value: { dollars: 5 } }),\n      }),\n    }),\n    createTransmutationTransition({\n      start: createBasicShapeTransmutationState({ shape: BasicShape.Cylinder }),\n      end: createLiquidAssetTransmutationState({\n        liquidAsset: createLiquidAsset({ value: { dollars: 10 } }),\n      }),\n    }),\n  ],\n  supportedMaterials = [MaterialType.SimplePolymer],\n  outputVolume = undefined,\n} = {}): DispatchService {\n  return {\n    type: ServiceType.Dispatch,\n    id,\n    displayName,\n    capabilities,\n    canBid,\n    currentActivity,\n    location,\n    orientation,\n    bounds,\n    currentCostPerTime,\n    supportedTransmutationTransitions,\n    supportedMaterials,\n    outputVolume,\n  };\n}\n","import { createUuid } from '../../../common/identity/factories';\nimport {\n  createCuboid,\n  createQuaternion,\n  createVector3,\n} from '../../../common/primitive/factories';\nimport { BasicShape } from '../../../common/topology/types';\nimport { createLiquidAsset } from '../../../economic/factories';\nimport { MaterialType } from '../../../material/types';\nimport { ActivityType } from '../../../workflow/types';\nimport {\n  createBasicShapeTransmutationState,\n  createTransmutationTransition,\n} from '../factories';\nimport { ServiceType } from '../types';\nimport { FFFPrinter } from './types';\n\nexport function createFFFPrinter({\n  id = createUuid(),\n  displayName = 'default-fff-printer',\n  capabilities = [ActivityType.Transmutation],\n  canBid = true,\n  currentActivity = undefined,\n  location = createVector3(),\n  orientation = createQuaternion(),\n  bounds = createCuboid({\n    min: createVector3({ x: -0.5, y: -0.5 }),\n    max: createVector3({ x: 0.5, y: 0.5, z: 1.0 }),\n  }),\n  currentCostPerTime = createLiquidAsset({ value: { dollars: 1e-6 } }),\n  supportedTransmutationTransitions = [\n    createTransmutationTransition({\n      start: createBasicShapeTransmutationState({ shape: BasicShape.Spool }),\n      end: createBasicShapeTransmutationState({ shape: BasicShape.RoughCube }),\n    }),\n    createTransmutationTransition({\n      start: createBasicShapeTransmutationState({ shape: BasicShape.Spool }),\n      end: createBasicShapeTransmutationState({\n        shape: BasicShape.RoughCylinder,\n      }),\n    }),\n  ],\n  supportedMaterials = [MaterialType.SimplePolymer],\n  outputVolume = createCuboid(),\n} = {}): FFFPrinter {\n  return {\n    type: ServiceType.FFFPrinter,\n    id,\n    displayName,\n    capabilities,\n    canBid,\n    currentActivity,\n    location,\n    orientation,\n    bounds,\n    currentCostPerTime,\n    supportedTransmutationTransitions,\n    supportedMaterials,\n    outputVolume,\n  };\n}\n","import { createUuid } from '../../../common/identity/factories';\nimport {\n  createCuboid,\n  createQuaternion,\n  createVector3,\n} from '../../../common/primitive/factories';\nimport { createLiquidAsset } from '../../../economic/factories';\nimport { ActivityType } from '../../../workflow/types';\nimport { ServiceType } from '../types';\nimport { FloorSpace } from './types';\n\nexport const createFloorSpace = ({\n  id = createUuid(),\n  displayName = 'default-floorspace',\n  capabilities = [ActivityType.Storage],\n  canBid = true,\n  currentActivity = undefined,\n  location = createVector3(),\n  orientation = createQuaternion(),\n  bounds = createCuboid({\n    min: createVector3({ x: -4, y: -2 }),\n    max: createVector3({ x: 4, y: 2, z: 2 }),\n  }),\n  currentCostPerTime = createLiquidAsset({ value: { dollars: 1e-6 } }),\n} = {}): FloorSpace => {\n  return {\n    type: ServiceType.Floorspace,\n    id,\n    displayName,\n    capabilities,\n    canBid,\n    currentActivity,\n    location,\n    orientation,\n    bounds,\n    currentCostPerTime,\n  };\n};\n","import { createUuid } from '../../../common/identity/factories';\nimport {\n  createCuboid,\n  createQuaternion,\n  createVector3,\n} from '../../../common/primitive/factories';\nimport { BasicShape } from '../../../common/topology/types';\nimport { createLiquidAsset } from '../../../economic/factories';\nimport { MaterialType } from '../../../material/types';\nimport { ActivityType } from '../../../workflow/types';\nimport {\n  createBasicShapeTransmutationState,\n  createTransmutationTransition,\n} from '../factories';\nimport { ServiceType } from '../types';\nimport { HumanWorker } from './types';\n\nexport function createHumanWorker({\n  id = createUuid(),\n  displayName = 'default-humanworker',\n  capabilities = [ActivityType.Transportation, ActivityType.Transmutation],\n  canBid = true,\n  currentActivity = undefined,\n  location = createVector3(),\n  orientation = createQuaternion(),\n  bounds = createCuboid({\n    min: createVector3({ x: -0.2, y: -0.2 }),\n    max: createVector3({ x: 0.2, y: 0.2, z: 1.5 }),\n  }),\n  currentCostPerTime = createLiquidAsset({ value: { dollars: 1e-6 } }),\n  capactityMass = 5,\n  movementVelocity = 0.5,\n  supportedTransmutationTransitions = [\n    createTransmutationTransition({\n      start: createBasicShapeTransmutationState({\n        shape: BasicShape.RoughCube,\n      }),\n      end: createBasicShapeTransmutationState({ shape: BasicShape.Cube }),\n    }),\n    createTransmutationTransition({\n      start: createBasicShapeTransmutationState({\n        shape: BasicShape.RoughCylinder,\n      }),\n      end: createBasicShapeTransmutationState({\n        shape: BasicShape.Cylinder,\n      }),\n    }),\n  ],\n  supportedMaterials = [MaterialType.SimplePolymer],\n  outputVolume = createCuboid(),\n} = {}): HumanWorker {\n  return {\n    type: ServiceType.HumanWorker,\n    id,\n    displayName,\n    capabilities,\n    canBid,\n    currentActivity,\n    location,\n    orientation,\n    bounds,\n    currentCostPerTime,\n    capactityMass,\n    movementVelocity,\n    supportedTransmutationTransitions,\n    supportedMaterials,\n    outputVolume,\n  };\n}\n","import { createUuid } from '../../../common/identity/factories';\nimport {\n  createCuboid,\n  createQuaternion,\n  createVector3,\n} from '../../../common/primitive/factories';\nimport { BasicShape } from '../../../common/topology/types';\nimport { createLiquidAsset } from '../../../economic/factories';\nimport { MaterialType } from '../../../material/types';\nimport { ActivityType } from '../../../workflow/types';\nimport {\n  createBasicShapeTransmutationState,\n  createLiquidAssetTransmutationState,\n  createTransmutationTransition,\n} from '../factories';\nimport { ServiceType } from '../types';\nimport { ProcurementService } from './types';\n\nexport function createProcurementService({\n  id = createUuid(),\n  displayName = 'default-procurement-service',\n  capabilities = [ActivityType.Transmutation],\n  canBid = true,\n  currentActivity = undefined,\n  location = createVector3(),\n  orientation = createQuaternion(),\n  bounds = createCuboid(),\n  currentCostPerTime = createLiquidAsset({ value: { dollars: 1e-6 } }),\n  supportedTransmutationTransitions = [\n    createTransmutationTransition({\n      start: createLiquidAssetTransmutationState({\n        liquidAsset: createLiquidAsset({ value: { dollars: 2 } }),\n      }),\n      end: createBasicShapeTransmutationState({ shape: BasicShape.Spool }),\n    }),\n  ],\n  supportedMaterials = [MaterialType.SimplePolymer],\n  outputVolume = undefined,\n} = {}): ProcurementService {\n  return {\n    type: ServiceType.Procurement,\n    id,\n    displayName,\n    capabilities,\n    canBid,\n    currentActivity,\n    location,\n    orientation,\n    bounds,\n    currentCostPerTime,\n    supportedTransmutationTransitions,\n    supportedMaterials,\n    outputVolume,\n  };\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { normalize } from 'normalizr';\nimport { BuildRequest } from '../buildrequest/types';\nimport { Parameter } from '../common/parameter/types';\nimport { Activity, Workflow } from '../workflow/types';\nimport { createFactory } from './factories';\nimport { activitySchema, factorySchema, workflowSchema } from './schemas';\nimport { ServiceProvider } from './services/types';\n\nconst factorySlice = createSlice({\n  name: 'factory',\n  initialState: normalize(createFactory(), factorySchema),\n  reducers: {\n    setDisplayName(state, action: PayloadAction<string>) {\n      state.result.displayName = action.payload;\n    },\n    setLiquidAssetDollars(state, action: PayloadAction<number>) {\n      state.entities = {\n        ...state.entities,\n        assets: {\n          ...state.entities.assets,\n          [state.result.liquidAsset]: {\n            ...(state.entities.assets\n              ? state.entities.assets[state.result.liquidAsset]\n              : {}),\n            dollars: action.payload,\n          },\n        },\n      };\n    },\n    addBuildRequest(state, action: PayloadAction<BuildRequest>) {\n      state.entities = {\n        ...state.entities,\n        buildRequests: {\n          ...state.entities.buildRequests,\n          [action.payload.id]: action.payload,\n        },\n      };\n      state.result = {\n        ...state.result,\n        buildRequests: [...state.result.buildRequests, action.payload.id],\n      };\n    },\n    updateBuildRequestWorkflow(\n      state,\n      action: PayloadAction<{ buildRequestId: string; workflow: Workflow }>\n    ) {\n      const normalizedWorkflow = normalize(\n        action.payload.workflow,\n        workflowSchema\n      );\n      state.entities = {\n        ...state.entities,\n        buildRequests: {\n          ...state.entities.buildRequests,\n          [action.payload.buildRequestId]: {\n            ...(state.entities.buildRequests\n              ? state.entities.buildRequests[action.payload.buildRequestId]\n              : {}),\n            workflow: action.payload.workflow.id,\n          },\n        },\n        activities: {\n          ...state.entities.activities,\n          ...normalizedWorkflow.entities.activities,\n        },\n        serviceProviders: {\n          ...state.entities.serviceProviders,\n          ...normalizedWorkflow.entities.serviceProviders,\n        },\n        workflows: {\n          ...state.entities.workflows,\n          ...normalizedWorkflow.entities.workflows,\n        },\n      };\n    },\n    requestFullfillmentOfActivity(_state, _action: PayloadAction<Activity>) {\n      // This action is to be picked up by middlewear saga for processing.\n      // This is trigged by the initial step in the Factory build request execution workflow\n      // From the primary factory saga.\n    },\n    offerFullfillmentOfActivity(\n      _state,\n      _action: PayloadAction<{\n        serviceProvider: ServiceProvider;\n        activity: Activity;\n      }>\n    ) {\n      // This action is to be picked up by middlewear saga for processing.\n      // This is trigged by the second step in the Factory build request execution workflow\n      // From the service providers returning 'quotes' of how to execute the activity.\n    },\n    acceptFullfillmentOfActivity(\n      _state,\n      _action: PayloadAction<{\n        serviceProvider: ServiceProvider;\n        activity: Activity;\n      }>\n    ) {\n      // This action is to be picked up by middlewear saga for processing.\n      // This is trigged by the third step in the Factory build request execution workflow\n      // From the primary factory saga to confirm that the service provider can go ahead and begin excution.\n    },\n    updateActivity(state, action: PayloadAction<Activity>) {\n      const normalizedActivity = normalize(action.payload, activitySchema);\n      state.entities = {\n        ...state.entities,\n        activities: {\n          ...state.entities.activities,\n          ...normalizedActivity.entities.activities,\n        },\n        serviceProviders: {\n          ...state.entities.serviceProviders,\n          ...normalizedActivity.entities.serviceProviders,\n        },\n      };\n    },\n    removeBuildRequest(_state, _action: PayloadAction<string>) {\n      console.error('Not Implemented');\n    },\n    setServiceProviderParameter(\n      state,\n      action: PayloadAction<{\n        serviceProviderId: string;\n        serviceProviderProperty: string[];\n        parameter: Parameter;\n      }>\n    ) {\n      if (\n        state.entities.serviceProviders &&\n        action.payload.serviceProviderId in state.entities.serviceProviders\n      ) {\n        //state.entities.activities[action.payload.id] = action.payload;\n\n        const serviceProvider =\n          state.entities.serviceProviders[action.payload.serviceProviderId];\n\n        // Make assumption that serviceProviderProperty are 1 or 2 layers deep.\n        // TODO: Replace this with a recursive structure.\n        if (action.payload.serviceProviderProperty.length === 1) {\n          serviceProvider[action.payload.serviceProviderProperty[0]] =\n            action.payload.parameter.value;\n        } else if (action.payload.serviceProviderProperty.length === 2) {\n          serviceProvider[action.payload.serviceProviderProperty[0]][\n            action.payload.serviceProviderProperty[1]\n          ] = action.payload.parameter.value;\n        } else {\n          console.error(\n            'Unable to setServiceProviderParameter (serviceProviderProperty array unexpected depth)'\n          );\n        }\n      } else {\n        console.error(\n          `Unable to update service provider parameter, service provider ${action.payload.serviceProviderId} not found`\n        );\n      }\n      /*\n\n      // Get the associated service provider from the application state.\n      const serviceProvider = state.entities.serviceProviders.find(\n        sp => sp.id === action.payload.serviceProviderId\n      );\n      if (!serviceProvider) return;*/\n    },\n  },\n});\n\nexport const {\n  setDisplayName,\n  setLiquidAssetDollars,\n  addBuildRequest,\n  updateBuildRequestWorkflow,\n  requestFullfillmentOfActivity,\n  offerFullfillmentOfActivity,\n  acceptFullfillmentOfActivity,\n  updateActivity,\n  removeBuildRequest,\n  setServiceProviderParameter,\n} = factorySlice.actions;\n\nexport const factoryReducer = factorySlice.reducer;\n","import { BuildRequest } from '../buildrequest/types';\nimport { createUuid } from '../common/identity/factories';\nimport { createCuboid, createVector3 } from '../common/primitive/factories';\nimport { createLiquidAsset } from '../economic/factories';\nimport { FixedAsset } from '../economic/types';\nimport { createDispatchService } from './services/dispatchservice/factories';\nimport { createFFFPrinter } from './services/fffprinter/factories';\nimport { createFloorSpace } from './services/floorspace/factories';\nimport { createHumanWorker } from './services/humanworker/factories';\nimport { createProcurementService } from './services/procurementservice/factories';\nimport { Factory } from './types';\n\nexport function createFactory({\n  id = createUuid(),\n  displayName = 'default-factory',\n  liquidAsset = createLiquidAsset(),\n  fixedAssets = [] as FixedAsset[],\n  buildRequests = [] as BuildRequest[],\n  serviceProviders = [\n    createFloorSpace({\n      displayName: 'Floorspace 1',\n    }),\n    createProcurementService({\n      displayName: 'Procurement 1',\n      location: createVector3({ x: -3, y: 2.5 }),\n      bounds: createCuboid({\n        min: createVector3({ x: -1, y: -0.5 }),\n        max: createVector3({ x: 1, y: 0.5, z: 0.1 }),\n      }),\n    }),\n    createHumanWorker({\n      displayName: 'Human 1',\n      location: createVector3({ x: 3, y: 1 }),\n    }),\n    createFFFPrinter({\n      displayName: 'Printer 1',\n      location: createVector3({ x: 0, y: -1 }),\n    }),\n    createDispatchService({\n      displayName: 'Dispatch 1',\n      location: createVector3({ x: 3, y: 2.5 }),\n      bounds: createCuboid({\n        min: createVector3({ x: -1, y: -0.5 }),\n        max: createVector3({ x: 1, y: 0.5, z: 0.1 }),\n      }),\n    }),\n  ],\n} = {}): Factory {\n  return {\n    id,\n    displayName,\n    liquidAsset,\n    fixedAssets,\n    buildRequests,\n    serviceProviders,\n  };\n}\n","import { createSelector } from 'reselect';\nimport { RootState } from '../index';\nimport { Market } from './types';\n\nexport const marketSelector = (state: RootState) => state.market;\n\nexport const marketVisibleSelector = createSelector(\n  [marketSelector],\n  (market: Market) => {\n    return market.visible;\n  }\n);\n\nexport const buildRequestsSelector = createSelector(\n  [marketSelector],\n  (market: Market) => {\n    return market.buildRequests;\n  }\n);\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { BuildRequest } from '../buildrequest/types';\nimport { Market } from './types';\n\nconst marketSlice = createSlice({\n  name: 'market',\n  initialState: {\n    visible: true,\n    buildRequests: [],\n  } as Market,\n  reducers: {\n    requestBidBuildRequest(_state, _action: PayloadAction<BuildRequest>) {\n      // This action is picked up by middlewear saga for verification first.\n    },\n    addBuildRequest(state, action: PayloadAction<BuildRequest>) {\n      state.buildRequests.push(action.payload);\n    },\n    removeBuildRequest(state, action: PayloadAction<string>) {\n      const indexToRemove = state.buildRequests.findIndex(\n        (el) => el.id === action.payload\n      );\n      if (indexToRemove === -1) {\n        console.error(`Unable to remove build request ${action.payload}`);\n        return; // Don't do anything if we can't find that element\n      }\n      state.buildRequests.splice(indexToRemove, 1); // Remove the element that has a matching index.\n    },\n  },\n});\n\nexport const {\n  requestBidBuildRequest,\n  addBuildRequest,\n  removeBuildRequest,\n} = marketSlice.actions;\n\nexport const marketReducer = marketSlice.reducer;\n","import { PayloadAction } from '@reduxjs/toolkit';\nimport { delay, put, select, takeEvery } from 'redux-saga/effects';\nimport { config } from '../../env/config';\nimport { createBuildRequest } from '../buildrequest/factories';\nimport { BuildRequest } from '../buildrequest/types';\nimport { createLiquidAsset } from '../economic/factories';\nimport { isAllowedToBidSelector } from '../factory/selectors';\nimport { addBuildRequest as addBuildRequestToFactory } from '../factory/slice';\nimport { createSimplePolymerMaterial } from '../material/factories';\nimport { buildRequestsSelector } from './selectors';\nimport {\n  addBuildRequest as addBuildRequestToMarket,\n  removeBuildRequest,\n  requestBidBuildRequest,\n} from './slice';\n\n/**\n * Helper function to sample randomly part names.\n * @param partNames\n */\nfunction getRandomPartName({\n  partNames = config.market.simpleMarketSaga.partNames,\n} = {}) {\n  return partNames[Math.floor(Math.random() * partNames.length)];\n}\n\n/**\n * Helper function to sample randomly ints from a range.\n * @param range\n */\nfunction getRandomFromIntRange({ min = 5, max = 10 } = {}) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\n/**\n * Runs a simple fixed market simulation.\n * Parts are randomly added and removed after a certain time.\n */\nexport function* simpleMarketSaga() {\n  console.log('Starting Simple Market');\n  //return;\n  while (true) {\n    // Check size of build requests open on the market\n    const buildRequests = (yield select(\n      buildRequestsSelector\n    )) as BuildRequest[];\n    if (\n      buildRequests.length >=\n      config.market.simpleMarketSaga.maxNumberOpenRequests\n    ) {\n      // Remove the oldest one.\n      const oldestBuildRequest = buildRequests.reduce((prev, curr) => {\n        return prev.created < curr.created ? prev : curr;\n      });\n      yield put(removeBuildRequest(oldestBuildRequest.id));\n    } else {\n      // Add a new build request to the market.\n      const value = getRandomFromIntRange(\n        config.market.simpleMarketSaga.partValueRange\n      );\n      yield put(\n        addBuildRequestToMarket(\n          createBuildRequest({\n            displayName: getRandomPartName(),\n            material: createSimplePolymerMaterial(),\n            fixedValue: createLiquidAsset({ value: { dollars: value } }),\n            scale: value * 0.01,\n          })\n        )\n      );\n    }\n\n    // Random ranged delay for a short while after each update.\n    yield delay(\n      getRandomFromIntRange(config.market.simpleMarketSaga.processingDelayRange)\n    );\n  }\n}\n\nexport function* buildRequestBidSaga(\n  requestBidBuildRequestAction: PayloadAction<BuildRequest>\n) {\n  const buildRequest = requestBidBuildRequestAction.payload;\n\n  // First Check that the factory is able to make this request (the UI should be disabled if that's the case)\n  // E.g is the number of active build requests more than maximum.\n  const isAllowedToBid = (yield select(isAllowedToBidSelector)) as boolean;\n\n  // If the factory entity was allowed to bid\n  if (isAllowedToBid) {\n    // Remove the build request from the list in the Market\n    yield put(removeBuildRequest(buildRequest.id));\n\n    // Add the Build Request to the Factory's active build requests.\n    yield put(addBuildRequestToFactory(buildRequest));\n  }\n}\n\nexport function* watchRequestAddBuildRequestSaga() {\n  yield takeEvery(requestBidBuildRequest.type, buildRequestBidSaga);\n}\n","export enum MarketFactoryPanelVisibilty {\n  None = 'None',\n  Market = 'Market',\n  Factory = 'Factory',\n}\n\nexport type ReduxFormParameterUpdate = {\n  target: {\n    name: string;\n    value: string;\n  };\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { MarketFactoryPanelVisibilty } from './types';\n\nconst selectedSlice = createSlice({\n  name: 'selected',\n  initialState: {\n    marketFactoryPanelVisibilty: MarketFactoryPanelVisibilty.Market,\n    primaryFocusBuildRequestId: undefined as string | undefined,\n    selectedServiceProviderId: undefined as string | undefined,\n  },\n  reducers: {\n    setMarketFactoryPanelVisibilty(\n      state,\n      action: PayloadAction<MarketFactoryPanelVisibilty>\n    ) {\n      state.marketFactoryPanelVisibilty = action.payload;\n    },\n    unSelectPrimaryFocusBuildRequest(state, _: PayloadAction) {\n      state.primaryFocusBuildRequestId = undefined;\n    },\n    setSelectedPrimaryFocusBuildRequest(state, action: PayloadAction<string>) {\n      state.primaryFocusBuildRequestId = action.payload;\n    },\n    unSelectServiceProvider(state, _: PayloadAction) {\n      state.selectedServiceProviderId = undefined;\n    },\n    setSelectedServiceProvider(state, action: PayloadAction<string>) {\n      state.selectedServiceProviderId = action.payload;\n    },\n  },\n});\n\nexport const {\n  setMarketFactoryPanelVisibilty,\n  unSelectPrimaryFocusBuildRequest,\n  setSelectedPrimaryFocusBuildRequest,\n  unSelectServiceProvider,\n  setSelectedServiceProvider,\n} = selectedSlice.actions;\n\nexport const selectedReducer = selectedSlice.reducer;\n","import { createUuid } from '../common/identity/factories';\nimport { createVector3 } from '../common/primitive/factories';\nimport { MaterialType } from '../material/types';\nimport {\n  Activity,\n  ActivityType,\n  StorageActivity,\n  TransmutationActivity,\n  TransmutationState,\n  TransportationActivity,\n  Workflow,\n} from './types';\nimport { ServiceProvider } from '../factory/services/types';\n\nexport function createTransportationActivity({\n  id = createUuid(),\n  displayName = 'default-transportation-activity',\n  serviceProvider = undefined as ServiceProvider | undefined,\n  started = undefined,\n  completed = undefined,\n  previousActivity = undefined as Activity | undefined,\n  nextActivity = undefined as Activity | undefined,\n  startLocation = createVector3(),\n  endLocation = createVector3(),\n} = {}): TransportationActivity {\n  return {\n    type: ActivityType.Transportation,\n    id,\n    displayName,\n    serviceProvider,\n    started,\n    completed,\n    previousActivity,\n    nextActivity,\n    startLocation,\n    endLocation,\n  };\n}\n\nexport function createTransmutationActivity({\n  id = createUuid(),\n  displayName = 'default-transmutation-activity',\n  serviceProvider = undefined as ServiceProvider | undefined,\n  started = undefined as Date | undefined,\n  completed = undefined as Date | undefined,\n  previousActivity = undefined as Activity | undefined,\n  nextActivity = undefined as Activity | undefined,\n  material = MaterialType.SimplePolymer,\n  startState = undefined as TransmutationState | undefined,\n  endState = undefined as TransmutationState | undefined,\n} = {}): TransmutationActivity {\n  return {\n    type: ActivityType.Transmutation,\n    id,\n    displayName,\n    serviceProvider,\n    started,\n    completed,\n    previousActivity,\n    nextActivity,\n    material,\n    startState,\n    endState,\n  };\n}\n\nexport function createStorageActivity({\n  id = createUuid(),\n  displayName = 'default-storage-activity',\n  serviceProvider = undefined as ServiceProvider | undefined,\n  started = undefined,\n  completed = undefined,\n  previousActivity = undefined as Activity | undefined,\n  nextActivity = undefined as Activity | undefined,\n  location = createVector3(),\n} = {}): StorageActivity {\n  return {\n    type: ActivityType.Storage,\n    id,\n    displayName,\n    serviceProvider,\n    started,\n    completed,\n    previousActivity,\n    nextActivity,\n    location,\n  };\n}\n\nexport function createWorkflow({\n  id = createUuid(),\n  displayName = 'default-workflow',\n  activities = [] as Activity[],\n  firstActivity = undefined as Activity | undefined,\n} = {}): Workflow {\n  return {\n    id,\n    displayName,\n    activities,\n    firstActivity,\n  };\n}\n","import { PayloadAction } from '@reduxjs/toolkit';\nimport { delay, put, select, take, takeEvery } from 'redux-saga/effects';\nimport { config } from '../../env/config';\nimport { BuildRequest } from '../buildrequest/types';\nimport { BasicShape } from '../common/topology/types';\nimport { LiquidAsset } from '../economic/types';\nimport { MaterialType } from '../material/types';\nimport {\n  createTransmutationActivity,\n  createTransportationActivity,\n  createWorkflow,\n} from '../workflow/factories';\nimport {\n  Activity,\n  TransmutationActivity,\n  TransmutationStateType,\n} from '../workflow/types';\nimport {\n  currentServiceProviderCostPerTimeSelector,\n  factoryLiquidAssetSelector,\n} from './selectors';\nimport {\n  createBasicShapeTransmutationState,\n  createLiquidAssetTransmutationState,\n} from './services/factories';\nimport { ServiceProvider } from './services/types';\nimport {\n  addBuildRequest,\n  offerFullfillmentOfActivity,\n  requestFullfillmentOfActivity,\n  setLiquidAssetDollars,\n  updateBuildRequestWorkflow,\n  acceptFullfillmentOfActivity,\n  updateActivity,\n} from './slice';\n\nexport function* factoryUpdateTickSaga() {\n  const updateDelayMs = config.factory.updatePeriodMs;\n  console.log(\n    `Starting endless factory tick saga (with period length of ${updateDelayMs}ms)`\n  );\n  while (true) {\n    yield delay(updateDelayMs);\n    //console.log('Recompute economics of Factory');\n\n    // Current State\n    const currentLiquidAsset = (yield select(\n      factoryLiquidAssetSelector\n    )) as LiquidAsset;\n\n    // Get income from the pending goods out buffer (Dispatch)\n\n    // Get material investment from pending goods in buffer (Procurement)\n\n    // Compute the cumulative current running cost of all service providers over the last updateDelay and update the current assets.\n    const currentServiceProviderCostPerTime = (yield select(\n      currentServiceProviderCostPerTimeSelector\n    )) as LiquidAsset;\n    const currentServiceProviderCostOverPeriod =\n      currentServiceProviderCostPerTime.value.dollars * updateDelayMs;\n\n    // Update the store with the current liquid assets.\n    yield put(\n      setLiquidAssetDollars(\n        currentLiquidAsset.value.dollars - currentServiceProviderCostOverPeriod\n      )\n    );\n  }\n}\n\n/**\n * Helper function to request and await fullfillment offers for an activity\n * @param activity Activity to be fullfilled\n * @returns ServiceProvider that has offered to fullfill the activity\n */\nfunction* triggerRequestFullfillmentOfActivity(activity: Activity) {\n  console.log(`Requesting fullfillment for activity ${activity.id}`);\n  yield put(requestFullfillmentOfActivity(activity));\n\n  // Wait for a fullfillment offer for this activity to come back from service providers.\n  let fullfillmentOffer: PayloadAction<{\n    serviceProvider: ServiceProvider;\n    activity: Activity;\n  }>;\n  while (true) {\n    fullfillmentOffer = (yield take(\n      offerFullfillmentOfActivity.type\n    )) as PayloadAction<{\n      serviceProvider: ServiceProvider;\n      activity: Activity;\n    }>;\n    if (fullfillmentOffer.payload.activity.id === activity.id) break;\n  }\n  return fullfillmentOffer;\n}\n\n/**\n * Primary workflow for handling the creation of the workflows which drive the factory.\n * @param addedActiveBuildRequest Build Request just added to the active list\n */\nexport function* buildRequestWorkflowSaga(\n  addedActiveBuildRequest: PayloadAction<BuildRequest>\n) {\n  const { payload: buildRequest } = addedActiveBuildRequest;\n  console.log(\n    `Computing the required workflow for build request ${buildRequest.id} (given the current active transmutation service providers in the factory)`\n  );\n\n  // Examine the build request desired end shape and material.\n  // Hack for now - to a known hardcoded flow for the basic polymer cube part (which is the only thing the simulated market is requesting for now.)\n  if (\n    !(\n      buildRequest.material.type === MaterialType.SimplePolymer &&\n      buildRequest.endShape === BasicShape.Cube\n    )\n  ) {\n    console.error('Unable to compute workflow for this material type / shape.');\n    return;\n  }\n\n  // New Proposed Steps.\n  // Build a simple flat array of activities (inside the workflow) (they will hold internal references to each other)\n  const computedWorkflow = createWorkflow();\n\n  // WIP: The workflow below assumes that the workflow can be achieved with a simple, naive first branch picked search of the graph to build a part.\n\n  // Current topological output shape in workflow generation\n  let currentTopologyState = createBasicShapeTransmutationState({\n    shape: buildRequest.endShape,\n  });\n  let previousTransmutationActivity: Activity;\n  let currentTransmutationActivity: Activity;\n\n  // 1. Request dispatch service provider and assign to final dispatch activity step.\n  currentTransmutationActivity = createTransmutationActivity({\n    displayName: 'Dispatch Part',\n    startState: currentTopologyState,\n    endState: createLiquidAssetTransmutationState({\n      liquidAsset: buildRequest.fixedValue,\n    }),\n  });\n  const dispatchOfferServiceProvider = (yield triggerRequestFullfillmentOfActivity(\n    currentTransmutationActivity\n  )) as PayloadAction<{\n    serviceProvider: ServiceProvider;\n    activity: Activity;\n  }>;\n  currentTransmutationActivity.serviceProvider =\n    dispatchOfferServiceProvider.payload.serviceProvider;\n  computedWorkflow.activities.push(currentTransmutationActivity);\n  previousTransmutationActivity = currentTransmutationActivity;\n\n  // 2. Perform the transmutation step search\n  while (true) {\n    currentTransmutationActivity = createTransmutationActivity({\n      displayName: 'Transmute Part',\n      endState: currentTopologyState,\n    });\n    const transmutationFullfillmentOffer = (yield triggerRequestFullfillmentOfActivity(\n      currentTransmutationActivity\n    )) as PayloadAction<{\n      serviceProvider: ServiceProvider;\n      activity: Activity;\n    }>;\n    const proposedServiceProvider =\n      transmutationFullfillmentOffer.payload.serviceProvider;\n    const proposedActivity = transmutationFullfillmentOffer.payload\n      .activity as TransmutationActivity;\n    if (!proposedActivity.startState) {\n      console.error(\n        'Transmutation fullfillment offer does not specify the start topology'\n      );\n      return;\n    }\n\n    currentTransmutationActivity.serviceProvider = proposedServiceProvider;\n    currentTransmutationActivity.nextActivity = previousTransmutationActivity;\n    previousTransmutationActivity.previousActivity = currentTransmutationActivity;\n    computedWorkflow.activities.push(currentTransmutationActivity);\n\n    if (\n      proposedActivity.startState.type === TransmutationStateType.BasicShapeType\n    ) {\n      currentTopologyState = proposedActivity.startState;\n      previousTransmutationActivity = currentTransmutationActivity;\n    } else {\n      console.log(\n        'Transmutation list complete (current transmutation does not start with basic shape topology)'\n      );\n      currentTransmutationActivity.displayName = 'Procure Part';\n      computedWorkflow.firstActivity = currentTransmutationActivity;\n      break;\n    }\n  }\n\n  // 3. Finally assemble the Transportation step search\n  while (currentTransmutationActivity.nextActivity) {\n    const startTransmutationServiceProvider =\n      currentTransmutationActivity.serviceProvider;\n    const endTransmutationServiceProvider =\n      currentTransmutationActivity.nextActivity.serviceProvider;\n    if (\n      !startTransmutationServiceProvider ||\n      !endTransmutationServiceProvider\n    ) {\n      console.error(\n        'Start or end transmutation activity does not have an associated service provider...'\n      );\n      break;\n    }\n\n    const currentTransportActivity = createTransportationActivity({\n      displayName: 'Transport Part',\n      startLocation: startTransmutationServiceProvider.location,\n      endLocation: endTransmutationServiceProvider.location,\n    });\n    const transportationFullfillmentOffer = (yield triggerRequestFullfillmentOfActivity(\n      currentTransportActivity\n    )) as PayloadAction<{\n      serviceProvider: ServiceProvider;\n      activity: Activity;\n    }>;\n\n    // Get the proposed transport service provider\n    const proposedTransportServiceProvider =\n      transportationFullfillmentOffer.payload.serviceProvider;\n\n    // Update and insert the transport activity between the transmutation activities.\n    // Update Current Transportation\n    currentTransportActivity.serviceProvider = proposedTransportServiceProvider;\n    currentTransportActivity.previousActivity = currentTransmutationActivity;\n    currentTransportActivity.nextActivity =\n      currentTransmutationActivity.nextActivity;\n    computedWorkflow.activities.push(currentTransportActivity);\n\n    // Transmutation Before\n    currentTransmutationActivity.nextActivity = currentTransportActivity;\n\n    // Transmutation After\n    currentTransportActivity.nextActivity.previousActivity = currentTransportActivity;\n\n    // Now consider the next transmutation activity\n    currentTransmutationActivity = currentTransportActivity.nextActivity;\n  }\n\n  // Proposed workflow is now computed.\n  console.log(\n    `Proposed workflow computed! Id: ${computedWorkflow.id} with ${computedWorkflow.activities.length} steps`\n  );\n\n  // Send out the computed build request workflow\n  yield put(\n    updateBuildRequestWorkflow({\n      buildRequestId: buildRequest.id,\n      workflow: computedWorkflow,\n    })\n  );\n\n  // Now the execution phase can begin\n  // Simply loop through the activities in the workflow, triggering execution and waiting till completion.\n  let currentExecutingActivity = computedWorkflow.firstActivity as Activity;\n  while (true) {\n    // Start the activity.\n    if (!currentExecutingActivity.serviceProvider) {\n      console.error(\n        'Unabled to find current executing activities service provider'\n      );\n      break;\n    }\n    yield put(\n      acceptFullfillmentOfActivity({\n        serviceProvider: currentExecutingActivity.serviceProvider,\n        activity: currentExecutingActivity,\n      })\n    );\n\n    // Wait for the activity to complete.\n    while (true) {\n      const updateActivityAction = (yield take(\n        updateActivity.type\n      )) as PayloadAction<Activity>;\n      if (\n        updateActivityAction.payload.id === currentExecutingActivity.id &&\n        updateActivityAction.payload.completed\n      )\n        break;\n    }\n\n    // Get next activity or break, if we have reached the end.\n    if (!currentExecutingActivity.nextActivity) break;\n    currentExecutingActivity = currentExecutingActivity.nextActivity;\n  }\n\n  // Onced completed remove the active build request (Or move to a completed state / section).\n  console.log(`Completed workflow ${computedWorkflow.id}`);\n}\n\nexport function* factoryWatchAddActiveBuildRequestSaga() {\n  yield takeEvery(addBuildRequest.type, buildRequestWorkflowSaga);\n}\n","import { takeEvery, select, put, delay } from 'redux-saga/effects';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nimport {\n  Activity,\n  ActivityType,\n  TransmutationStateType,\n  TransmutationActivity,\n} from '../../../workflow/types';\nimport {\n  requestFullfillmentOfActivity,\n  offerFullfillmentOfActivity,\n  acceptFullfillmentOfActivity,\n  updateActivity,\n} from '../../slice';\nimport { factoryServiceProvidersSelector } from '../../selectors';\nimport { ServiceProvider, ServiceType } from '../types';\nimport { ProcurementService } from './types';\n\nfunction* generateBidWorkflow(\n  requestFufillmentOfActivity: PayloadAction<Activity>\n) {\n  const activity = requestFufillmentOfActivity.payload;\n\n  // When generating bids, get the procurement services from the factory's service providers.\n  const serviceProviders = (yield select(\n    factoryServiceProvidersSelector\n  )) as ServiceProvider[];\n  const procurementServiceProviders = serviceProviders.filter(\n    (sp) => sp.type === ServiceType.Procurement\n  ) as ProcurementService[];\n\n  // Grab the first service provider that can bid.\n  // TD: In the future service providers should be able to bid on future tasks to append to a buffer.\n  const availableProcurementServiceProviders = procurementServiceProviders.filter(\n    (psp) => psp.canBid\n  );\n  const procurementServiceProvider =\n    availableProcurementServiceProviders.length > 0\n      ? availableProcurementServiceProviders[0]\n      : undefined;\n  if (!procurementServiceProvider) {\n    console.warn(\n      `Unable to generate bid for activity ${activity.id}, no procurement services available`\n    );\n    return; // Early return if no service providers available to bid.\n  }\n\n  if (activity.type === ActivityType.Transmutation) {\n    // Check for each transition if the procurement services's end state is BasicShape, the action has an end state that is also BasicShape and that the service can\n    // offer the shape required.\n    const chosenTopologyTransition = procurementServiceProvider.supportedTransmutationTransitions.find(\n      (transition) =>\n        transition.end.type === TransmutationStateType.BasicShapeType &&\n        activity.endState &&\n        activity.endState.type === TransmutationStateType.BasicShapeType &&\n        activity.endState.shape === transition.end.shape\n    );\n    if (chosenTopologyTransition) {\n      console.log(\n        `Procurement service ${procurementServiceProvider.id} will offer fullfillment for this transmutation activity. (It will not append any required input topology, as it will just require liquid assets)`\n      );\n      if (\n        chosenTopologyTransition.start.type ===\n        TransmutationStateType.LiquidAssetType\n      ) {\n        activity.startState = chosenTopologyTransition.start;\n        yield put(\n          offerFullfillmentOfActivity({\n            serviceProvider: procurementServiceProvider,\n            activity: activity,\n          })\n        );\n      } else {\n        console.error(\n          `Procurement service ${procurementServiceProvider.id} has misconfigured transmutation transition start type (should be liquid asset)`\n        );\n      }\n    }\n  }\n}\n\nfunction* executeActivityWorkflow(\n  action: PayloadAction<{\n    serviceProvider: ServiceProvider;\n    activity: Activity;\n  }>\n) {\n  if (action.payload.serviceProvider.type !== ServiceType.Procurement) return;\n  const serviceProvider = action.payload.serviceProvider as ProcurementService;\n  const activity = action.payload.activity as TransmutationActivity;\n  // Started timestamp.\n  activity.started = new Date();\n\n  // Interact with virtual market and exchange the factory liquid asset for the material fixed asset to add to worshop.\n  // Somehow assign the material fixed asset to this active activity / build request?\n  console.log(\n    `Procurement service ${serviceProvider.id} starting to execute transmutation activity ${activity.id}`\n  );\n  yield delay(1000);\n\n  // Completed timestamp and update.\n  activity.completed = new Date();\n  yield put(updateActivity(activity));\n}\n\nexport function* watchRequestFufillmentOfActivitySaga() {\n  yield takeEvery(requestFullfillmentOfActivity.type, generateBidWorkflow);\n}\n\nexport function* watchAcceptFullfillmentOfActivitySaga() {\n  yield takeEvery(acceptFullfillmentOfActivity.type, executeActivityWorkflow);\n}\n","import { takeEvery, select, put, delay } from 'redux-saga/effects';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nimport {\n  Activity,\n  ActivityType,\n  TransmutationStateType,\n  TransmutationActivity,\n  TransportationActivity,\n} from '../../../workflow/types';\nimport {\n  requestFullfillmentOfActivity,\n  offerFullfillmentOfActivity,\n  acceptFullfillmentOfActivity,\n  updateActivity,\n} from '../../slice';\nimport { factoryServiceProvidersSelector } from '../../selectors';\nimport { ServiceProvider, ServiceType } from '../types';\nimport { HumanWorker } from './types';\nimport { createBasicShapeTransmutationState } from '../factories';\n\nfunction* generateBidWorkflow(\n  requestFufillmentOfActivity: PayloadAction<Activity>\n) {\n  const activity = requestFufillmentOfActivity.payload;\n\n  // When generating bids, get the Human workers from the factory's service providers.\n  const serviceProviders = (yield select(\n    factoryServiceProvidersSelector\n  )) as ServiceProvider[];\n  const humanServiceProviders = serviceProviders.filter(\n    (sp) => sp.type === ServiceType.HumanWorker\n  ) as HumanWorker[];\n\n  // Grab the first service provider that can bid.\n  // TD: In the future service providers should be able to bid on future tasks to append to a buffer.\n  const availableHumanServiceProviders = humanServiceProviders.filter(\n    (hsp) => hsp.canBid\n  );\n  const humanServiceProvider =\n    availableHumanServiceProviders.length > 0\n      ? availableHumanServiceProviders[0]\n      : undefined;\n  if (!humanServiceProvider) {\n    console.warn(\n      `Unable to generate bid for activity ${activity.id}, no human workers available`\n    );\n    return; // Early return if no service providers available to bid.\n  }\n\n  if (activity.type === ActivityType.Transportation) {\n    console.log(\n      `Human worker service ${humanServiceProvider.id} will offer fullfillment for this transportation activity`\n    );\n    yield put(\n      offerFullfillmentOfActivity({\n        serviceProvider: humanServiceProvider,\n        activity: activity,\n      })\n    );\n  } else if (activity.type === ActivityType.Transmutation) {\n    // Check for each transition if the human worker's end state is BasicShape, the action has an end state that is also BasicShape and that the service can\n    // offer the shape required.\n    const chosenTopologyTransition = humanServiceProvider.supportedTransmutationTransitions.find(\n      (transition) =>\n        transition.end.type === TransmutationStateType.BasicShapeType &&\n        activity.endState &&\n        activity.endState.type === TransmutationStateType.BasicShapeType &&\n        activity.endState.shape === transition.end.shape\n    );\n    if (chosenTopologyTransition) {\n      console.log(\n        `Human worker service ${humanServiceProvider.id} will offer fullfillment for this transmutation activity. (Appending required input topology)`\n      );\n      if (\n        chosenTopologyTransition.start.type ===\n        TransmutationStateType.BasicShapeType\n      ) {\n        activity.startState = createBasicShapeTransmutationState({\n          shape: chosenTopologyTransition.start.shape,\n        });\n        yield put(\n          offerFullfillmentOfActivity({\n            serviceProvider: humanServiceProvider,\n            activity: activity,\n          })\n        );\n      } else {\n        console.error(\n          `Human worker service ${humanServiceProvider.id} has misconfigured TopologyTransition start type`\n        );\n      }\n    }\n  }\n}\n\nfunction* executeTransportationActivity(\n  humanWorker: HumanWorker,\n  transportationActivity: TransportationActivity\n) {\n  // Started timestamp.\n  transportationActivity.started = new Date();\n\n  console.log(\n    `Human worker service ${humanWorker.id} starting to execute transportation activity ${transportationActivity.id}`\n  );\n  yield delay(1000);\n\n  // Completed timestamp and update.\n  transportationActivity.completed = new Date();\n  yield put(updateActivity(transportationActivity));\n}\n\nfunction* executeTransmutationActivity(\n  humanWorker: HumanWorker,\n  transmutationActivity: TransmutationActivity\n) {\n  // Started timestamp.\n  transmutationActivity.started = new Date();\n\n  console.log(\n    `Human worker service ${humanWorker.id} starting to execute transmutation activity ${transmutationActivity.id}`\n  );\n  yield delay(1000);\n\n  // Completed timestamp and update.\n  transmutationActivity.completed = new Date();\n  yield put(updateActivity(transmutationActivity));\n}\n\nfunction* executeActivityWorkflow(\n  action: PayloadAction<{\n    serviceProvider: ServiceProvider;\n    activity: Activity;\n  }>\n) {\n  if (action.payload.serviceProvider.type !== ServiceType.HumanWorker) return;\n  const serviceProvider = action.payload.serviceProvider as HumanWorker;\n\n  switch (action.payload.activity.type) {\n    case ActivityType.Transportation:\n      yield executeTransportationActivity(\n        serviceProvider,\n        action.payload.activity\n      );\n      break;\n    case ActivityType.Transmutation:\n      yield executeTransmutationActivity(\n        serviceProvider,\n        action.payload.activity\n      );\n      break;\n    default:\n      console.error('Unsupported activity type for Human Worker');\n      return;\n  }\n}\n\nexport function* watchRequestFufillmentOfActivitySaga() {\n  yield takeEvery(requestFullfillmentOfActivity.type, generateBidWorkflow);\n}\n\nexport function* watchAcceptFullfillmentOfActivitySaga() {\n  yield takeEvery(acceptFullfillmentOfActivity.type, executeActivityWorkflow);\n}\n","import { takeEvery, select, put, delay } from 'redux-saga/effects';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nimport {\n  Activity,\n  ActivityType,\n  TransmutationStateType,\n  TransmutationActivity,\n} from '../../../workflow/types';\nimport {\n  requestFullfillmentOfActivity,\n  offerFullfillmentOfActivity,\n  acceptFullfillmentOfActivity,\n  updateActivity,\n} from '../../slice';\nimport { factoryServiceProvidersSelector } from '../../selectors';\nimport { ServiceProvider, ServiceType } from '../types';\nimport { FFFPrinter } from './types';\nimport { createBasicShapeTransmutationState } from '../factories';\n\nfunction* generateBidWorkflow(\n  requestFufillmentOfActivity: PayloadAction<Activity>\n) {\n  const activity = requestFufillmentOfActivity.payload;\n\n  // When generating bids, get the fff printers from the factory's service providers.\n  const serviceProviders = (yield select(\n    factoryServiceProvidersSelector\n  )) as ServiceProvider[];\n  const fffPrinterServiceProviders = serviceProviders.filter(\n    (sp) => sp.type === ServiceType.FFFPrinter\n  ) as FFFPrinter[];\n\n  // Grab the first service provider that can bid.\n  // TD: In the future service providers should be able to bid on future tasks to append to a buffer.\n  const availableFFFPrinterServiceProviders = fffPrinterServiceProviders.filter(\n    (fffpsp) => fffpsp.canBid\n  );\n  const fffPrinterServiceProvider =\n    availableFFFPrinterServiceProviders.length > 0\n      ? availableFFFPrinterServiceProviders[0]\n      : undefined;\n  if (!fffPrinterServiceProvider) {\n    console.warn(\n      `Unable to generate bid for activity ${activity.id}, no fff printers available`\n    );\n    return; // Early return if no service providers available to bid.\n  }\n\n  if (activity.type === ActivityType.Transmutation) {\n    // Check for each transition if the printer's end state is BasicShape, the action has an end state that is also BasicShape and that the printer can\n    // offer the shape required.\n    const chosenTopologyTransition = fffPrinterServiceProvider.supportedTransmutationTransitions.find(\n      (transition) =>\n        transition.end.type === TransmutationStateType.BasicShapeType &&\n        activity.endState &&\n        activity.endState.type === TransmutationStateType.BasicShapeType &&\n        activity.endState.shape === transition.end.shape\n    );\n    if (chosenTopologyTransition) {\n      console.log(\n        `FFF printer service ${fffPrinterServiceProvider.id} will offer fullfillment for this transmutation activity . (Appending required input topology)`\n      );\n      if (\n        chosenTopologyTransition.start.type ===\n        TransmutationStateType.BasicShapeType\n      ) {\n        activity.startState = createBasicShapeTransmutationState({\n          shape: chosenTopologyTransition.start.shape,\n        });\n        yield put(\n          offerFullfillmentOfActivity({\n            serviceProvider: fffPrinterServiceProvider,\n            activity: activity,\n          })\n        );\n      } else {\n        console.error(\n          `FFF printer service ${fffPrinterServiceProvider.id} has misconfigured TopologyTransition start type`\n        );\n      }\n    }\n  }\n}\n\nfunction* executeActivityWorkflow(\n  action: PayloadAction<{\n    serviceProvider: ServiceProvider;\n    activity: Activity;\n  }>\n) {\n  if (action.payload.serviceProvider.type !== ServiceType.FFFPrinter) return;\n  const serviceProvider = action.payload.serviceProvider as FFFPrinter;\n  const activity = action.payload.activity as TransmutationActivity;\n\n  // Started timestamp.\n  activity.started = new Date();\n\n  // Interact with virtual market and exchange the factory liquid asset for the material fixed asset to add to worshop.\n  // Somehow assign the material fixed asset to this active activity / build request?\n  console.log(\n    `FFF printer service ${serviceProvider.id} starting to execute transmutation activity ${activity.id}`\n  );\n  yield delay(1000);\n\n  // Completed timestamp and update.\n  activity.completed = new Date();\n  yield put(updateActivity(activity));\n}\n\nexport function* watchRequestFufillmentOfActivitySaga() {\n  yield takeEvery(requestFullfillmentOfActivity.type, generateBidWorkflow);\n}\n\nexport function* watchAcceptFullfillmentOfActivitySaga() {\n  yield takeEvery(acceptFullfillmentOfActivity.type, executeActivityWorkflow);\n}\n","import { PayloadAction } from '@reduxjs/toolkit';\nimport { delay, put, select, takeEvery } from 'redux-saga/effects';\nimport {\n  Activity,\n  ActivityType,\n  TransmutationActivity,\n} from '../../../workflow/types';\nimport { factoryServiceProvidersSelector } from '../../selectors';\nimport {\n  acceptFullfillmentOfActivity,\n  offerFullfillmentOfActivity,\n  requestFullfillmentOfActivity,\n  updateActivity,\n} from '../../slice';\nimport { ServiceProvider, ServiceType } from '../types';\nimport { DispatchService } from './types';\n\nfunction* generateBidWorkflow(\n  requestFufillmentOfActivity: PayloadAction<Activity>\n) {\n  const activity = requestFufillmentOfActivity.payload;\n\n  // When generating bids, get the dispatch services from the dispatch's service providers.\n  const serviceProviders = (yield select(\n    factoryServiceProvidersSelector\n  )) as ServiceProvider[];\n  const dispatchServiceProviders = serviceProviders.filter(\n    (sp) => sp.type === ServiceType.Dispatch\n  ) as DispatchService[];\n\n  // Grab the first service provider that can bid.\n  // TD: In the future service providers should be able to bid on future tasks to append to a buffer.\n  const availableDispatchServiceProviders = dispatchServiceProviders.filter(\n    (psp) => psp.canBid\n  );\n  const dispatchServiceProvider =\n    availableDispatchServiceProviders.length > 0\n      ? availableDispatchServiceProviders[0]\n      : undefined;\n  if (!dispatchServiceProvider) {\n    console.warn(\n      `Unable to generate bid for activity ${activity.id}, no dispatch services available`\n    );\n    return; // Early return if no service providers available to bid.\n  }\n\n  if (activity.type === ActivityType.Transmutation) {\n    console.log(\n      'Dispatch service will generate quote for this transmutation activity'\n    );\n    yield put(\n      offerFullfillmentOfActivity({\n        serviceProvider: dispatchServiceProvider,\n        activity: activity,\n      })\n    );\n  }\n}\n\nfunction* executeActivityWorkflow(\n  action: PayloadAction<{\n    serviceProvider: ServiceProvider;\n    activity: Activity;\n  }>\n) {\n  if (action.payload.serviceProvider.type !== ServiceType.Dispatch) return;\n  const serviceProvider = action.payload.serviceProvider as DispatchService;\n  const activity = action.payload.activity as TransmutationActivity;\n\n  // Started timestamp.\n  activity.started = new Date();\n\n  // Interact with virtual market and exchange the factory liquid asset for the material fixed asset to add to worshop.\n  // Somehow assign the material fixed asset to this active activity / build request?\n  console.log(\n    `Dispatch service ${serviceProvider.id} starting to execute transmutation activity ${activity.id}`\n  );\n  yield delay(1000);\n\n  // Completed timestamp and update.\n  activity.completed = new Date();\n  yield put(updateActivity(activity));\n}\n\nexport function* watchRequestFufillmentOfActivitySaga() {\n  yield takeEvery(requestFullfillmentOfActivity.type, generateBidWorkflow);\n}\n\nexport function* watchAcceptFullfillmentOfActivitySaga() {\n  yield takeEvery(acceptFullfillmentOfActivity.type, executeActivityWorkflow);\n}\n","import { all, fork } from 'redux-saga/effects';\nimport {\n  watchRequestFufillmentOfActivitySaga as procurementWatchRequestFufillmentOfActivitySaga,\n  watchAcceptFullfillmentOfActivitySaga as procurementWatchAcceptFullfillmentOfActivitySaga,\n} from './procurementservice/sagas';\nimport {\n  watchRequestFufillmentOfActivitySaga as humanWorkerWatchRequestFufillmentOfActivitySaga,\n  watchAcceptFullfillmentOfActivitySaga as humanWorkerWatchAcceptFullfillmentOfActivitySaga,\n} from './humanworker/sagas';\nimport {\n  watchRequestFufillmentOfActivitySaga as fffPrinterWatchRequestFufillmentOfActivitySaga,\n  watchAcceptFullfillmentOfActivitySaga as fffPrinterWatchAcceptFullfillmentOfActivitySaga,\n} from './fffprinter/sagas';\nimport {\n  watchRequestFufillmentOfActivitySaga as dispatchWatchRequestFufillmentOfActivitySaga,\n  watchAcceptFullfillmentOfActivitySaga as dispatchWatchAcceptFullfillmentOfActivitySaga,\n} from './dispatchservice/sagas';\n\nexport function* serviceProvidersWatchFactoryOpenActivitiesSaga() {\n  yield all([\n    fork(procurementWatchRequestFufillmentOfActivitySaga),\n    fork(humanWorkerWatchRequestFufillmentOfActivitySaga),\n    fork(fffPrinterWatchRequestFufillmentOfActivitySaga),\n    fork(dispatchWatchRequestFufillmentOfActivitySaga),\n  ]);\n}\n\nexport function* serviceProvidersWatchAcceptFullfillmentOfActivitiesSaga() {\n  yield all([\n    fork(procurementWatchAcceptFullfillmentOfActivitySaga),\n    fork(humanWorkerWatchAcceptFullfillmentOfActivitySaga),\n    fork(fffPrinterWatchAcceptFullfillmentOfActivitySaga),\n    fork(dispatchWatchAcceptFullfillmentOfActivitySaga),\n  ]);\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nconst informationSlice = createSlice({\n  name: 'information',\n  initialState: {\n    informationOverlayVisible: false,\n  },\n  reducers: {\n    showInformationOverlay(state, _: PayloadAction) {\n      state.informationOverlayVisible = true;\n    },\n    hideInformationOverlay(state, _: PayloadAction) {\n      state.informationOverlayVisible = false;\n    },\n  },\n});\n\nexport const {\n  showInformationOverlay,\n  hideInformationOverlay,\n} = informationSlice.actions;\n\nexport const informationReducer = informationSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { combineReducers } from '@reduxjs/toolkit';\n\nimport createSagaMiddleware from 'redux-saga';\nimport { all, fork } from 'redux-saga/effects';\n\nimport { generateIdentitySaga } from './textile/user-identity-sagas';\n\nimport {\n  simpleMarketSaga,\n  watchRequestAddBuildRequestSaga,\n} from './market/sagas';\n\nimport { reducer as formReducer } from 'redux-form';\nimport { textileReducer } from './textile/slice';\nimport { marketReducer } from './market/slice';\nimport { factoryReducer } from './factory/slice';\nimport { selectedReducer } from './selected/slice';\nimport {\n  factoryUpdateTickSaga,\n  factoryWatchAddActiveBuildRequestSaga,\n} from './factory/sagas';\nimport {\n  serviceProvidersWatchFactoryOpenActivitiesSaga,\n  serviceProvidersWatchAcceptFullfillmentOfActivitiesSaga,\n} from './factory/services/sagas';\nimport { informationReducer } from './information/slice';\n\nfunction* rootSaga() {\n  yield all([\n    fork(generateIdentitySaga),\n    fork(simpleMarketSaga),\n    fork(watchRequestAddBuildRequestSaga),\n    fork(factoryUpdateTickSaga),\n    fork(factoryWatchAddActiveBuildRequestSaga),\n    fork(serviceProvidersWatchFactoryOpenActivitiesSaga),\n    fork(serviceProvidersWatchAcceptFullfillmentOfActivitiesSaga),\n  ]);\n}\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const rootReducer = combineReducers({\n  textile: textileReducer,\n  market: marketReducer,\n  factory: factoryReducer,\n  selected: selectedReducer,\n  information: informationReducer,\n  form: formReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: [sagaMiddleware] as const,\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport type RootDispatch = typeof store.dispatch;\n","import { RootState } from '..';\n\nexport const userIdentityDetailsOverlayVisibleSelector = (\n  state: RootState\n): boolean => state.textile.detailsVisible;\n\nexport const userIdentityPublicKeySelector = (\n  state: RootState\n): string | undefined => state.textile.user?.privateKey.toString();\n","import { RootState } from '..';\n\nexport const informationOverlayVisibleSelector = (state: RootState) =>\n  state.information.informationOverlayVisible;\n","import { createSelector } from 'reselect';\nimport { BuildRequest } from '../buildrequest/types';\nimport { Cuboid, Quaternion, Vector3 } from '../common/primitive/types';\nimport { Entity } from '../factory/entity/types';\nimport {\n  factoryBuildRequestsSelector,\n  factoryServiceProvidersSelector,\n} from '../factory/selectors';\nimport { ServiceProvider } from '../factory/services/types';\nimport { RootState } from '../index';\nimport { Activity, Workflow } from '../workflow/types';\n\nexport const selectedSelector = (state: RootState) => state.selected;\n\nexport const marketFactoryPanelVisibiltySelector = createSelector(\n  [selectedSelector],\n  (selected) => selected.marketFactoryPanelVisibilty\n);\n\nexport const primaryFocusBuildRequestIdSelector = createSelector(\n  [selectedSelector],\n  (selected) => selected.primaryFocusBuildRequestId\n);\n\nexport const primaryFocusBuildRequestSelector = createSelector(\n  [factoryBuildRequestsSelector, primaryFocusBuildRequestIdSelector],\n  (\n    factoryBuildRequests: BuildRequest[],\n    primaryFocusBuildRequestId: string | undefined\n  ): BuildRequest | undefined => {\n    if (!primaryFocusBuildRequestId) return undefined;\n    return factoryBuildRequests.find(\n      (br) => br.id === primaryFocusBuildRequestId\n    );\n  }\n);\n\nexport const primaryFocusBuildRequestWorkflowSelector = createSelector(\n  [primaryFocusBuildRequestSelector],\n  (\n    primaryFocusBuildRequest: BuildRequest | undefined\n  ): Workflow | undefined => {\n    if (!primaryFocusBuildRequest) return undefined;\n    return primaryFocusBuildRequest.workflow;\n  }\n);\n\nexport const primaryFocusBuildRequestOrderedActivitiesSelector = createSelector(\n  [primaryFocusBuildRequestWorkflowSelector],\n  (\n    primaryFocusBuildRequestWorkflow: Workflow | undefined\n  ): Activity[] | undefined => {\n    if (!primaryFocusBuildRequestWorkflow) return undefined;\n    const orderedActivities: Activity[] = [];\n    let currentActivity = primaryFocusBuildRequestWorkflow.firstActivity;\n    while (currentActivity) {\n      orderedActivities.push(currentActivity);\n      currentActivity = currentActivity.nextActivity;\n    }\n    return orderedActivities;\n  }\n);\n\nexport const selectedServiceProviderIdSelector = createSelector(\n  [selectedSelector],\n  (selected) => selected.selectedServiceProviderId\n);\n\nexport const selectedServiceProviderSelector = createSelector(\n  [factoryServiceProvidersSelector, selectedServiceProviderIdSelector],\n  (\n    factoryServiceProviders: ServiceProvider[],\n    selectedServiceProviderId: string | undefined\n  ): ServiceProvider | undefined => {\n    if (!selectedServiceProviderId) return undefined;\n    return factoryServiceProviders.find(\n      (sp) => sp.id === selectedServiceProviderId\n    );\n  }\n);\n\nexport const selectedServiceProviderEntitySelector = createSelector(\n  [selectedServiceProviderSelector],\n  (\n    selectedServiceProvider: ServiceProvider | undefined\n  ): Entity | undefined => {\n    if (!selectedServiceProvider) return undefined;\n    return selectedServiceProvider as Entity;\n  }\n);\n\nexport const selectedServiceProviderLocationSelector = createSelector(\n  [selectedServiceProviderEntitySelector],\n  (selectedServiceProviderEntity: Entity | undefined): Vector3 | undefined => {\n    if (!selectedServiceProviderEntity) return undefined;\n    return selectedServiceProviderEntity.location;\n  }\n);\n\nexport const selectedServiceProviderOrientationSelector = createSelector(\n  [selectedServiceProviderEntitySelector],\n  (\n    selectedServiceProviderEntity: Entity | undefined\n  ): Quaternion | undefined => {\n    if (!selectedServiceProviderEntity) return undefined;\n    return selectedServiceProviderEntity.orientation;\n  }\n);\n\nexport const selectedServiceProviderBoundsSelector = createSelector(\n  [selectedServiceProviderEntitySelector],\n  (selectedServiceProviderEntity: Entity | undefined): Cuboid | undefined => {\n    if (!selectedServiceProviderEntity) return undefined;\n    return selectedServiceProviderEntity.bounds;\n  }\n);\n\n/*export const selectedParametersSelector = createSelector(\n  [selectedServiceProviderSelector],\n  (selected: ServiceProvider | undefined): Parameter[] => {\n    if (!selected) return [];\n    return [\n      createNumberParameter(\n        createExistingIdentity('Location X', 'locationX'),\n        'm',\n        selected.location.x\n      ),\n      createNumberParameter(\n        createExistingIdentity('Location Y', 'locationY'),\n        'm',\n        selected.location.y\n      ),\n      createNumberParameter(\n        createExistingIdentity('Location Z', 'locationZ'),\n        'm',\n        selected.location.z\n      )\n    ];\n  }\n);\n\nexport const selectedParameterInitialValuesSelector = createSelector(\n  [selectedParametersSelector],\n  (parameters: Parameter[]): LocationParameters => {\n    const initialParameterValues: any = {}; // eslint-disable-line @typescript-eslint/no-explicit-any\n    parameters.forEach(parameter => {\n      initialParameterValues[parameter.identity.uuid] = parameter.value;\n    });\n    return initialParameterValues as LocationParameters;\n  }\n);*/\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { RootDispatch } from '../../../store';\nimport { Activity } from '../../../store/workflow/types';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\n\nfunction mapDispatch(_dispatch: RootDispatch) {\n  return {};\n}\n\nconst connector = connect(null, mapDispatch);\n\ninterface OwnProps {\n  activity: Activity;\n}\n\ntype Props = ConnectedProps<typeof connector> & OwnProps;\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(2),\n  },\n  title: {\n    fontSize: 14,\n  },\n  subTitle: {\n    marginBottom: theme.spacing(2),\n  },\n  footer: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nfunction ActivityDetails(props: Props) {\n  const classes = useStyles();\n  const { activity } = props;\n\n  return (\n    <Card className={classes.container}>\n      <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n        Activity\n      </Typography>\n      <Typography>{activity.displayName}</Typography>\n      <Typography className={classes.subTitle} color=\"textSecondary\">\n        {activity.id}\n      </Typography>\n      <Typography color=\"textSecondary\">\n        Type: {activity.type.toString()}\n      </Typography>\n      <Typography color=\"textSecondary\">\n        Started:{' '}\n        {activity.started\n          ? activity.started.toLocaleTimeString()\n          : 'Not started...'}\n      </Typography>\n      <Typography color=\"textSecondary\">\n        Completed:{' '}\n        {activity.completed\n          ? activity.completed.toLocaleTimeString()\n          : 'Not completed...'}\n      </Typography>\n      <Typography color=\"textSecondary\">\n        Assigned Service Provider:{' '}\n        {activity.serviceProvider\n          ? activity.serviceProvider.displayName\n          : 'Not assigned to service provider...'}\n      </Typography>\n    </Card>\n  );\n}\n\nexport default connector(ActivityDetails);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { RootState, RootDispatch } from '../../../store';\nimport { unSelectPrimaryFocusBuildRequest } from '../../../store/selected/slice';\nimport {\n  primaryFocusBuildRequestSelector,\n  primaryFocusBuildRequestOrderedActivitiesSelector,\n} from '../../../store/selected/selectors';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  Button,\n  Card,\n  Typography,\n  CardContent,\n  CardActions,\n  Box,\n} from '@material-ui/core';\nimport ActivityDetails from './ActivityDetails';\n\nfunction mapState(state: RootState) {\n  return {\n    buildRequest: primaryFocusBuildRequestSelector(state),\n    orderedActivities: primaryFocusBuildRequestOrderedActivitiesSelector(state),\n  };\n}\n\nfunction mapDispatch(dispatch: RootDispatch) {\n  return {\n    onCloseClicked: () => {\n      dispatch(unSelectPrimaryFocusBuildRequest());\n    },\n  };\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    margin: theme.spacing(2),\n    flexGrow: 1,\n    overflow: 'auto',\n    maxHeight: '80vh', // Couldn't find a nicer way. Be cool if I could reference the max height of\n  },\n  internalContainer: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n}));\n\nfunction BuildRequestDetails(props: Props): JSX.Element {\n  const classes = useStyles();\n\n  const { buildRequest, orderedActivities, onCloseClicked } = props;\n\n  if (!buildRequest) {\n    return (\n      <Card className={classes.container}>\n        <CardContent>\n          <Typography\n            className={classes.title}\n            color=\"textSecondary\"\n            gutterBottom\n          >\n            No selected build request (You probably should not be seeing this)\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Button color=\"primary\" size=\"small\" onClick={onCloseClicked}>\n            Close\n          </Button>\n        </CardActions>\n      </Card>\n    );\n  }\n\n  const {\n    id,\n    displayName,\n    created,\n    material,\n    endShape,\n    scale,\n    fixedValue,\n    workflow,\n  } = buildRequest;\n\n  const WorkflowsCardContent = () => {\n    if (workflow && orderedActivities && orderedActivities.length > 0) {\n      return (\n        <Card className={classes.internalContainer}>\n          <Typography variant=\"h5\" component=\"h2\" className={classes.pos}>\n            {workflow.displayName}\n          </Typography>\n          {orderedActivities.map((activity) => {\n            return <ActivityDetails key={activity.id} activity={activity} />;\n          })}\n        </Card>\n      );\n    } else {\n      return <Typography color=\"textSecondary\">Generating...</Typography>;\n    }\n  };\n\n  return (\n    <Card className={classes.container}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          Build Request Details\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {displayName}\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          {id}\n        </Typography>\n        <Box>\n          <Typography color=\"textPrimary\">\n            Created: {created.toLocaleTimeString()}\n          </Typography>\n          <Typography color=\"textPrimary\">\n            Value: ${fixedValue.value.dollars}\n          </Typography>\n          <Typography color=\"textPrimary\">\n            Material: {material.type.toString()}\n          </Typography>\n          <Typography color=\"textPrimary\">\n            Shape: {endShape.toString()}\n          </Typography>\n          <Typography color=\"textPrimary\">Scale: {scale}m</Typography>\n        </Box>\n        <WorkflowsCardContent />\n      </CardContent>\n      <CardActions>\n        <Button color=\"primary\" size=\"small\" onClick={onCloseClicked}>\n          Close\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default connector(BuildRequestDetails);\n","import * as THREE from 'three';\nimport { createSelector } from 'reselect';\nimport { Entity } from '../entity/types';\nimport { selectedServiceProviderEntitySelector } from '../../selected/selectors';\nimport { CameraTarget } from './types';\n\nexport const selectedEntityCameraTargetSelector = createSelector(\n  [selectedServiceProviderEntitySelector],\n  (\n    selectedServiceProviderEntity: Entity | undefined\n  ): CameraTarget | undefined => {\n    if (!selectedServiceProviderEntity) return undefined; // return CreateDefaultCameraTarget();\n\n    // First compute camera position (slightly offset from above)\n    const cameraPosition = new THREE.Vector3(\n      selectedServiceProviderEntity.location.x,\n      selectedServiceProviderEntity.location.y - 2,\n      5\n    );\n\n    // Second compute target, the selected entity\n    const cameraLookAt = new THREE.Vector3(\n      selectedServiceProviderEntity.location.x,\n      selectedServiceProviderEntity.location.y,\n      selectedServiceProviderEntity.location.z\n    );\n\n    // Finally, the bounds can be an approximate scaled version of the entity bounding box on XY\n    const cameraScreenSpaceBounds = new THREE.Box2(\n      new THREE.Vector2(\n        selectedServiceProviderEntity.bounds.min.x * 2,\n        selectedServiceProviderEntity.bounds.min.y * 2\n      ),\n      new THREE.Vector2(\n        selectedServiceProviderEntity.bounds.max.x * 2,\n        selectedServiceProviderEntity.bounds.max.y * 2\n      )\n    );\n\n    return {\n      position: cameraPosition,\n      lookAt: cameraLookAt,\n      screenSpaceBounds: cameraScreenSpaceBounds,\n    };\n  }\n);\n","import React, { useState, useRef } from 'react';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { ReactThreeFiber, extend, useThree, useFrame } from 'react-three-fiber';\nimport { useSpring } from '@react-spring/three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { CameraTarget } from '../../../../store/factory/camera/types';\n\n// A few linter disables required to convince React / Typescript to use the OrbitControls.\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace JSX {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    interface IntrinsicElements {\n      // eslint-disable-next-line no-undef\n      orbitControls: ReactThreeFiber.Node<OrbitControls, typeof OrbitControls>;\n    }\n  }\n}\n\nextend({ OrbitControls });\n\nexport function SmoothOrbitCamera(props: {\n  cameraTarget: CameraTarget | undefined;\n}) {\n  const { gl, camera } = useThree();\n  camera.up.set(0, 0, 1);\n  const orbitRef = useRef<OrbitControls>();\n  const { cameraTarget } = props;\n\n  const [cameraMoving, setCameraMoving] = useState(false);\n\n  const { springyCameraPos, springyCameraLookAt } = useSpring({\n    springyCameraPos: [\n      cameraTarget ? cameraTarget.position.x : camera.position.x,\n      cameraTarget ? cameraTarget.position.y : camera.position.y,\n      cameraTarget ? cameraTarget.position.z : camera.position.z,\n    ],\n    springyCameraLookAt: [\n      cameraTarget\n        ? cameraTarget.lookAt.x\n        : orbitRef.current\n        ? orbitRef.current.target.x\n        : 0,\n      cameraTarget\n        ? cameraTarget.lookAt.y\n        : orbitRef.current\n        ? orbitRef.current.target.y\n        : 0,\n      cameraTarget\n        ? cameraTarget.lookAt.z\n        : orbitRef.current\n        ? orbitRef.current.target.z\n        : 0,\n    ],\n    onStart: () => {\n      setCameraMoving(true);\n    },\n    onRest: () => {\n      setCameraMoving(false);\n    },\n  });\n\n  useFrame(() => {\n    if (cameraTarget && cameraMoving) {\n      const cameraPos = springyCameraPos.getValue();\n      const cameraLookAt = springyCameraLookAt.getValue();\n      if (cameraPos && cameraLookAt && orbitRef.current) {\n        camera.position.set(cameraPos[0], cameraPos[1], cameraPos[2]);\n        orbitRef.current.target.set(\n          cameraLookAt[0],\n          cameraLookAt[1],\n          cameraLookAt[2]\n        );\n        orbitRef.current.update();\n      }\n    }\n  });\n\n  return (\n    <orbitControls\n      ref={orbitRef}\n      args={[camera, gl.domElement]}\n      maxPolarAngle={Math.PI / 4}\n    />\n  );\n}\n","import React, { useRef, useState, useMemo } from 'react';\nimport { Mesh, Vector3 } from 'three';\nimport { useSpring, a } from '@react-spring/three';\n\ntype OwnProp = {\n  gridSize: number;\n  position: Vector3;\n};\n\ntype OwnDispatch = unknown;\n\ntype Props = OwnProp & OwnDispatch;\n\nexport function GridHoverCursor(props: Props): JSX.Element {\n  const { gridSize } = props;\n  const { x, y } = props.position;\n  const mesh = useRef<Mesh>();\n\n  const [target, setTarget] = useState(new Vector3(0, 0, 0));\n  useMemo(() => {\n    setTarget(\n      new Vector3(\n        Math.floor(x / gridSize) + gridSize / 2,\n        Math.floor(y / gridSize) + gridSize / 2,\n        0\n      )\n    );\n  }, [gridSize, x, y]);\n\n  const { springycursorPostion } = useSpring({\n    springycursorPostion: [target.x, target.y, target.z],\n  });\n\n  return (\n    <a.mesh position={springycursorPostion} ref={mesh}>\n      <boxBufferGeometry attach=\"geometry\" args={[1, 1, 0.2]} />\n      <meshBasicMaterial attach=\"material\" color={'royalblue'} />\n    </a.mesh>\n  );\n}\n","import React from 'react';\nimport { Color } from 'three';\n\nexport function Lighting(): JSX.Element {\n  return (\n    <group>\n      <ambientLight intensity={0.3} />\n      <spotLight\n        castShadow\n        color={new Color(0xffdddd)}\n        intensity={0.4}\n        angle={Math.PI / 7}\n        position={[10, 10, 15]}\n        penumbra={2}\n        shadow-mapSize-width={2048}\n        shadow-mapSize-height={2048}\n      />\n      <pointLight color={new Color(0xddddff)} intensity={0.2} />\n    </group>\n  );\n}\n","import React, { useRef } from 'react';\nimport { Mesh, Vector3 } from 'three';\n\nexport interface OnPointerMoveArgs {\n  point: Vector3;\n  ray: {\n    origin: Vector3;\n    direction: Vector3;\n  };\n}\n\ntype OwnProp = {\n  largeX: number;\n  largeY: number;\n};\n\ntype OwnDispatch = {\n  onHover: (onPointerMove: OnPointerMoveArgs) => void;\n  onSelected: () => void;\n};\n\ntype Props = OwnProp & OwnDispatch;\n\nexport function BasePlane(props: Props): JSX.Element {\n  const mesh = useRef<Mesh>();\n\n  const { largeX, largeY, onHover, onSelected } = props;\n\n  return (\n    <mesh\n      receiveShadow\n      position={[0, 0, -0.1]}\n      ref={mesh}\n      onPointerMove={(e) => {\n        e.stopPropagation();\n        onHover(e);\n      }}\n      onClick={(e) => {\n        e.stopPropagation();\n        onSelected();\n      }}\n    >\n      <planeBufferGeometry attach=\"geometry\" args={[largeX, largeY]} />\n      <meshStandardMaterial attach=\"material\" color={'lightgrey'} />\n    </mesh>\n  );\n}\n","import React, { useMemo, useRef, useState } from 'react';\nimport { Euler, Mesh, Quaternion as ThreeQuaternion } from 'three';\nimport { FloorSpace } from '../../../../store/factory/services/floorspace/types';\n\ntype OwnProp = {\n  floorSpace: FloorSpace;\n};\n\ntype OwnDispatch = {\n  onSelected: (id: string) => void;\n};\n\ntype Props = OwnProp & OwnDispatch;\n\nexport function FloorSpaceElement(props: Props): JSX.Element {\n  const mesh = useRef<Mesh>();\n\n  const { id, location, orientation, bounds } = props.floorSpace;\n\n  // React hooks for converting the Quaterion into Euler angles.\n  const [eulerRotation, setEulerRotation] = useState<Euler>(new Euler(0, 0, 0));\n  useMemo(() => {\n    const newEuler = new Euler(0, 0, 0);\n    newEuler.setFromQuaternion(\n      new ThreeQuaternion(\n        orientation.x,\n        orientation.y,\n        orientation.z,\n        orientation.w\n      )\n    );\n    setEulerRotation(newEuler);\n  }, [orientation]);\n\n  const thickness = 0.1;\n\n  return (\n    <mesh\n      castShadow\n      receiveShadow\n      position={[location.x, location.y, location.z - thickness / 2]}\n      rotation={eulerRotation}\n      ref={mesh}\n      onClick={(e) => {\n        e.stopPropagation();\n        props.onSelected(id);\n      }}\n    >\n      <boxBufferGeometry\n        attach=\"geometry\"\n        args={[\n          bounds.max.x - bounds.min.x,\n          bounds.max.y - bounds.min.y,\n          thickness,\n        ]}\n      />\n      <meshStandardMaterial attach=\"material\" color={'grey'} />\n    </mesh>\n  );\n}\n","import React from 'react';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const IpfsContext = React.createContext<undefined | any>(undefined);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { useState, useEffect, useContext } from 'react';\nimport { GLTFLoader, GLTF } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { IpfsContext } from './IpfsContext';\n\n// Taken from https://github.com/react-spring/react-three-fiber/blob/fec915980278ba041b458d9dffb26a7747ec7bce/src/hooks.ts\nconst blackList = [\n  'id',\n  'uuid',\n  'type',\n  'children',\n  'parent',\n  'matrix',\n  'matrixWorld',\n  'matrixWorldNeedsUpdate',\n  'modelViewMatrix',\n  'normalMatrix',\n];\n\n// Taken from https://github.com/react-spring/react-three-fiber/blob/fec915980278ba041b458d9dffb26a7747ec7bce/src/hooks.ts\nfunction prune(props: any) {\n  const reducedProps = { ...props };\n  // Remove black listed props\n  blackList.forEach((name) => delete reducedProps[name]);\n  // Remove functions\n  Object.keys(reducedProps).forEach(\n    (name) =>\n      typeof reducedProps[name] === 'function' && delete reducedProps[name]\n  );\n  // Prune materials and geometries\n  if (reducedProps.material)\n    reducedProps.material = prune(reducedProps.material);\n  if (reducedProps.geometry)\n    reducedProps.geometry = prune(reducedProps.geometry);\n  // Return cleansed object\n  return reducedProps;\n}\n\ntype BaseGLTFResult = GLTF & {\n  nodes: any; // This depends on gltfjsx generator\n  materials: any; // ditto ^^\n};\n\n// Meta hook for setting up Ipfs, downloading model by content Id, and parsing into the generic result type.\nexport const useIpfsGltfLoader = <T extends BaseGLTFResult>(\n  modelCID: string\n): T | undefined => {\n  // Experimental file loading from ipfs\n  const ipfs = useContext(IpfsContext);\n\n  // Downloaded model chunks.\n  const [model, setModel] = useState<any | undefined>(undefined);\n\n  useEffect(() => {\n    // This won't run untill ipfs is defined.\n    const downloadModel = async (ipfs: any) => {\n      const chunks = [];\n      for await (const chunk of ipfs.cat(modelCID)) {\n        chunks.push(chunk);\n        console.log('Got model chunk...');\n      }\n      console.log('All chunks downloaded! length: ' + chunks.length);\n      setModel(chunks);\n    };\n    if (ipfs) downloadModel(ipfs);\n  }, [ipfs, modelCID]);\n\n  // New From Model Data\n  const [result, setResult] = useState<T>();\n\n  useEffect(() => {\n    // This won't run until the model is defined.\n    if (!model) return;\n    const loadGLTF = async () => {\n      const loader = new GLTFLoader();\n\n      // This has to be deprecated at some point!\n      // Taken from  https://github.com/react-spring/react-three-fiber/blob/fec915980278ba041b458d9dffb26a7747ec7bce/src/hooks.ts\n\n      // We are just assuming a single chunk\n      loader.parse(model[0], '', (gltf: GLTF) => {\n        // Temp array for traversal.\n        const temp = [];\n\n        // Nodes and materials are better\n        let nodes: any = {};\n        const materials: any = {};\n        gltf.scene.traverse((obj: any) => {\n          temp.push(prune(obj));\n          if (obj.name) nodes = { ...nodes, [obj.name]: obj };\n          if (obj.material && !materials[obj.material.name])\n            materials[obj.material.name] = obj.material;\n        });\n\n        // Pass data out.\n        setResult({\n          ...gltf,\n          nodes: nodes,\n          materials: materials,\n        } as T);\n      });\n    };\n    loadGLTF();\n  }, [model]);\n\n  return result;\n};\n","import React from 'react';\n\nexport const ModelProxy = (): JSX.Element => {\n  return (\n    <mesh>\n      <boxBufferGeometry attach=\"geometry\" />\n    </mesh>\n  );\n};\n","/*\nauto-generated by: https://github.com/react-spring/gltfjsx\n*/\n\nimport * as THREE from 'three';\nimport React, { useRef } from 'react';\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { useIpfsGltfLoader } from '../../../../../store/ipfs/use-ipfs-gltf-loader';\nimport { ModelProxy } from './ModelProxy';\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    mergedBlocks: THREE.Mesh;\n  };\n  materials: {\n    _defaultMat: THREE.MeshStandardMaterial;\n  };\n};\n\nexport default function Model(props: JSX.IntrinsicElements['group']) {\n  const group = useRef<THREE.Group>();\n\n  const result = useIpfsGltfLoader<GLTFResult>(\n    'QmQZDpCFgiUtZwzi3UUKWUHUS44kqA25z8SKoo98MrLaPS'\n  );\n\n  /*const { nodes, materials } = useLoader<GLTFResult>(\n    GLTFLoader,\n    '/HumanWorker.gltf'\n  );*/\n\n  if (result) {\n    const { nodes, materials } = result;\n    return (\n      <group ref={group} {...props} dispose={null}>\n        <mesh\n          material={materials._defaultMat}\n          geometry={nodes.mergedBlocks.geometry}\n        />\n      </group>\n    );\n  } else {\n    return ModelProxy();\n  }\n}\n","import React, { useState, useMemo, Suspense } from 'react';\nimport { Euler, Quaternion as ThreeQuaternion } from 'three';\nimport HumanWorkerModel from './models/HumanWorker.gltf';\nimport { HumanWorker } from '../../../../store/factory/services/humanworker/types';\n\ntype OwnProp = {\n  humanWorker: HumanWorker;\n};\n\ntype OwnDispatch = {\n  onSelected: (id: string) => void;\n};\n\ntype Props = OwnProp & OwnDispatch;\n\nexport function HumanWorkerElement(props: Props): JSX.Element {\n  const { id, location, orientation } = props.humanWorker;\n\n  // React hooks for converting the Quaterion into Euler angles.\n  const [eulerRotation, setEulerRotation] = useState<Euler>(new Euler(0, 0, 0));\n  useMemo(() => {\n    const newEuler = new Euler(0, 0, 0);\n    newEuler.setFromQuaternion(\n      new ThreeQuaternion(\n        orientation.x,\n        orientation.y,\n        orientation.z,\n        orientation.w\n      )\n    );\n    setEulerRotation(newEuler);\n  }, [orientation]);\n\n  return (\n    <Suspense fallback={null}>\n      <HumanWorkerModel\n        position={[location.x, location.y, location.z]}\n        rotation={eulerRotation}\n        onClick={(e) => {\n          e.stopPropagation();\n          props.onSelected(id);\n        }}\n      />\n    </Suspense>\n  );\n}\n","/*\nauto-generated by: https://github.com/react-spring/gltfjsx\n*/\n\nimport * as THREE from 'three';\nimport React, { useRef } from 'react';\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { useIpfsGltfLoader } from '../../../../../store/ipfs/use-ipfs-gltf-loader';\nimport { ModelProxy } from './ModelProxy';\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    mergedBlocks_1_0: THREE.Mesh;\n    mergedBlocks_1_1: THREE.Mesh;\n    mergedBlocks_1_2: THREE.Mesh;\n    mergedBlocks_1_3: THREE.Mesh;\n  };\n\n  materials: {\n    custom2: THREE.MeshStandardMaterial;\n    custom1: THREE.MeshStandardMaterial;\n    custom3: THREE.MeshStandardMaterial;\n    _defaultMat: THREE.MeshStandardMaterial;\n  };\n};\n\nexport default function Model(props: JSX.IntrinsicElements['group']) {\n  const group = useRef<THREE.Group>();\n\n  const result = useIpfsGltfLoader<GLTFResult>(\n    'QmbdSeJfWsUm5ghb9pp98qwnbTbzKN8BvtarJhRTmTxhCw'\n  );\n\n  if (result) {\n    const { nodes, materials } = result;\n    return (\n      <group ref={group} {...props} dispose={null}>\n        <mesh\n          material={materials.custom2}\n          geometry={nodes.mergedBlocks_1_0.geometry}\n        />\n        <mesh\n          material={materials.custom1}\n          geometry={nodes.mergedBlocks_1_1.geometry}\n        />\n        <mesh\n          material={materials.custom3}\n          geometry={nodes.mergedBlocks_1_2.geometry}\n        />\n        <mesh\n          material={materials._defaultMat}\n          geometry={nodes.mergedBlocks_1_3.geometry}\n        />\n      </group>\n    );\n  } else {\n    return ModelProxy();\n  }\n}\n","import React, { useMemo, useState, Suspense } from 'react';\nimport { Euler, Quaternion as ThreeQuaternion } from 'three';\nimport FFFPrinterModel from './models/FFFPrinter.gltf';\nimport { FFFPrinter } from '../../../../store/factory/services/fffprinter/types';\n\ntype OwnProp = {\n  fffPrinter: FFFPrinter;\n};\n\ntype OwnDispatch = {\n  onSelected: (id: string) => void;\n};\n\ntype Props = OwnProp & OwnDispatch;\n\nexport function FFFPrinterElement(props: Props): JSX.Element {\n  const { id, location, orientation } = props.fffPrinter;\n\n  // React hooks for converting the Quaterion into Euler angles.\n  const [eulerRotation, setEulerRotation] = useState<Euler>(new Euler(0, 0, 0));\n  useMemo(() => {\n    const newEuler = new Euler(0, 0, 0);\n    newEuler.setFromQuaternion(\n      new ThreeQuaternion(\n        orientation.x,\n        orientation.y,\n        orientation.z,\n        orientation.w\n      )\n    );\n    setEulerRotation(newEuler);\n  }, [orientation]);\n\n  return (\n    <Suspense fallback={null}>\n      <FFFPrinterModel\n        position={[location.x, location.y, location.z]}\n        rotation={eulerRotation}\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        onClick={(e: any) => {\n          e.stopPropagation();\n          props.onSelected(id);\n        }}\n      />\n    </Suspense>\n  );\n}\n","import React, { useRef, useState, useMemo } from 'react';\nimport { Mesh, Euler, Quaternion as ThreeQuaternion } from 'three';\nimport { ProcurementService } from '../../../../store/factory/services/procurementservice/types';\n\ntype OwnProp = {\n  procurementService: ProcurementService;\n};\n\ntype OwnDispatch = {\n  onSelected: (id: string) => void;\n};\n\ntype Props = OwnProp & OwnDispatch;\n\nexport function ProcurementElement(props: Props): JSX.Element {\n  const mesh = useRef<Mesh>();\n\n  const { id, location, orientation, bounds } = props.procurementService;\n\n  // React hooks for converting the Quaterion into Euler angles.\n  const [eulerRotation, setEulerRotation] = useState<Euler>(new Euler(0, 0, 0));\n  useMemo(() => {\n    const newEuler = new Euler(0, 0, 0);\n    newEuler.setFromQuaternion(\n      new ThreeQuaternion(\n        orientation.x,\n        orientation.y,\n        orientation.z,\n        orientation.w\n      )\n    );\n    setEulerRotation(newEuler);\n  }, [orientation]);\n\n  // Some logic for nicely rendering a collection of fixed assets in (e.g material etc.)\n  //const [assetInOffset, setAssetsInOffset] = useState<number>(0);\n\n  return (\n    <group>\n      {/*assetsIn.map(asset => {\n        switch (asset.type) {\n          case FixedAssetType.SimplePolymerSpool:\n            return (\n              <SimplePolymerSpool\n                key={asset.id.uuid}\n                position={[\n                  asset.location.x,\n                  asset.location.y,\n                  asset.location.z\n                ]}\n              />\n            );\n          default:\n            return null;\n        }\n      })*/}\n      <mesh\n        castShadow\n        receiveShadow\n        position={[location.x, location.y, location.z]}\n        rotation={eulerRotation}\n        ref={mesh}\n        onClick={(e) => {\n          e.stopPropagation();\n          props.onSelected(id);\n        }}\n      >\n        <boxBufferGeometry\n          attach=\"geometry\"\n          args={[\n            bounds.max.x - bounds.min.x,\n            bounds.max.y - bounds.min.y,\n            bounds.max.z - bounds.min.z,\n          ]}\n        />\n        <meshStandardMaterial attach=\"material\" color={'grey'} />\n      </mesh>\n    </group>\n  );\n}\n","import React, { useMemo, useRef, useState } from 'react';\nimport { Euler, Mesh, Quaternion as ThreeQuaternion } from 'three';\nimport { DispatchService } from '../../../../store/factory/services/dispatchservice/types';\n\ntype OwnProp = {\n  dispatchService: DispatchService;\n};\n\ntype OwnDispatch = {\n  onSelected: (id: string) => void;\n};\n\ntype Props = OwnProp & OwnDispatch;\n\nexport function DispatchElement(props: Props): JSX.Element {\n  const mesh = useRef<Mesh>();\n\n  const { id, location, orientation, bounds } = props.dispatchService;\n\n  // React hooks for converting the Quaterion into Euler angles.\n  const [eulerRotation, setEulerRotation] = useState<Euler>(new Euler(0, 0, 0));\n  useMemo(() => {\n    const newEuler = new Euler(0, 0, 0);\n    newEuler.setFromQuaternion(\n      new ThreeQuaternion(\n        orientation.x,\n        orientation.y,\n        orientation.z,\n        orientation.w\n      )\n    );\n    setEulerRotation(newEuler);\n  }, [orientation]);\n\n  return (\n    <mesh\n      castShadow\n      receiveShadow\n      position={[location.x, location.y, location.z]}\n      rotation={eulerRotation}\n      ref={mesh}\n      onClick={(e) => {\n        e.stopPropagation();\n        props.onSelected(id);\n      }}\n    >\n      <boxBufferGeometry\n        attach=\"geometry\"\n        args={[\n          bounds.max.x - bounds.min.x,\n          bounds.max.y - bounds.min.y,\n          bounds.max.z - bounds.min.z,\n        ]}\n      />\n      <meshStandardMaterial attach=\"material\" color={'grey'} />\n    </mesh>\n  );\n}\n","import React, { useRef } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Mesh } from 'three';\nimport { RootState, RootDispatch } from '../../../../store';\n\nimport { FloorSpaceElement } from './FloorSpace';\nimport { HumanWorkerElement } from './HumanWorker';\n\nimport {\n  ServiceProvider,\n  ServiceType,\n} from '../../../../store/factory/services/types';\nimport { FloorSpace } from '../../../../store/factory/services/floorspace/types';\nimport { HumanWorker } from '../../../../store/factory/services/humanworker/types';\n\nimport { setSelectedServiceProvider } from '../../../../store/selected/slice';\nimport { FFFPrinterElement } from './FFFPrinter';\nimport { FFFPrinter } from '../../../../store/factory/services/fffprinter/types';\nimport { ProcurementElement } from './Procurement';\nimport { ProcurementService } from '../../../../store/factory/services/procurementservice/types';\nimport { DispatchElement } from './Dispatch';\nimport { DispatchService } from '../../../../store/factory/services/dispatchservice/types';\n\nfunction mapState(_: RootState) {\n  return {};\n}\n\nfunction mapDispatch(dispatch: RootDispatch) {\n  return {\n    onSelected: (id: string) => {\n      dispatch(setSelectedServiceProvider(id));\n    },\n  };\n}\ntype OwnProps = {\n  serviceProvider: ServiceProvider;\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype Props = ConnectedProps<typeof connector> & OwnProps;\n\nfunction ServiceProviderElement(props: Props): JSX.Element {\n  const mesh = useRef<Mesh>();\n\n  // Pull out properties\n  const { serviceProvider } = props;\n  const { id, location } = serviceProvider;\n\n  // Render generic things about service provider\n  //  - Invisible bounding box at a location / Orientation\n  //  - Proxy for the mesh?\n\n  switch (serviceProvider.type) {\n    case ServiceType.Floorspace:\n      return (\n        <FloorSpaceElement\n          floorSpace={serviceProvider as FloorSpace}\n          onSelected={props.onSelected}\n        />\n      );\n    case ServiceType.Procurement:\n      return (\n        <ProcurementElement\n          procurementService={serviceProvider as ProcurementService}\n          onSelected={props.onSelected}\n        />\n      );\n    case ServiceType.HumanWorker:\n      return (\n        <HumanWorkerElement\n          humanWorker={serviceProvider as HumanWorker}\n          onSelected={props.onSelected}\n        />\n      );\n    case ServiceType.FFFPrinter:\n      return (\n        <FFFPrinterElement\n          fffPrinter={serviceProvider as FFFPrinter}\n          onSelected={props.onSelected}\n        />\n      );\n    case ServiceType.Dispatch:\n      return (\n        <DispatchElement\n          dispatchService={serviceProvider as DispatchService}\n          onSelected={props.onSelected}\n        />\n      );\n    default:\n      return (\n        <mesh\n          position={[location.x, location.y, location.z]}\n          ref={mesh}\n          onClick={(e) => {\n            e.stopPropagation();\n            props.onSelected(id);\n          }}\n        >\n          <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\n          <meshStandardMaterial attach=\"material\" color={'red'} />\n        </mesh>\n      );\n  }\n}\n\nexport default connector(ServiceProviderElement);\n","import React, { useState } from 'react';\nimport { Vector3 } from 'three';\nimport { Canvas } from 'react-three-fiber';\n\nimport {\n  ReactReduxContext,\n  Provider,\n  connect,\n  ConnectedProps,\n} from 'react-redux';\nimport { RootState, RootDispatch } from '../../../store';\nimport { unSelectServiceProvider } from '../../../store/selected/slice';\nimport { factoryServiceProvidersSelector } from '../../../store/factory/selectors';\nimport { selectedEntityCameraTargetSelector } from '../../../store/factory/camera/selectors';\n\nimport { SmoothOrbitCamera } from './camera/SmoothOrbitCamera';\nimport { GridHoverCursor } from './cursor/GridHoverCursor';\nimport { Lighting } from './base/Lighting';\nimport { BasePlane } from './base/BasePlane';\nimport ServiceProvider from './services/ServiceProvider';\nimport { IpfsContext } from '../../../store/ipfs/IpfsContext';\n\nfunction mapState(state: RootState) {\n  return {\n    cameraTarget: selectedEntityCameraTargetSelector(state),\n    servicesProviders: factoryServiceProvidersSelector(state),\n  };\n}\n\nfunction mapDispatch(dispatch: RootDispatch) {\n  return {\n    onBasePlaneSelected: () => {\n      dispatch(unSelectServiceProvider());\n    },\n    onInputRegionSelected: () => {\n      console.log('Input region selected');\n    },\n    onOutputRegionSelected: () => {\n      console.log('Output region selected');\n    },\n  };\n}\n\nconst connector = connect(mapState, mapDispatch);\ntype Props = ConnectedProps<typeof connector>;\n\nfunction Factory(props: Props) {\n  const { cameraTarget, servicesProviders, onBasePlaneSelected } = props;\n  const [cursorPostion, setCursorPosition] = useState(new Vector3(0, 0, 0));\n\n  return (\n    <ReactReduxContext.Consumer>\n      {({ store }) => (\n        <IpfsContext.Consumer>\n          {(ipfs) => (\n            <Canvas shadowMap>\n              <Provider store={store}>\n                <IpfsContext.Provider value={ipfs}>\n                  <SmoothOrbitCamera cameraTarget={cameraTarget} />\n                  <Lighting />\n                  <BasePlane\n                    largeX={100}\n                    largeY={100}\n                    onHover={(args) => setCursorPosition(args.point)}\n                    onSelected={onBasePlaneSelected}\n                  />\n                  <GridHoverCursor gridSize={1} position={cursorPostion} />\n                  {servicesProviders.map((servicesProvider) => {\n                    return (\n                      <ServiceProvider\n                        key={servicesProvider.id}\n                        serviceProvider={servicesProvider}\n                      />\n                    );\n                  })}\n                </IpfsContext.Provider>\n              </Provider>\n            </Canvas>\n          )}\n        </IpfsContext.Consumer>\n      )}\n    </ReactReduxContext.Consumer>\n  );\n}\n\nexport default connector(Factory);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { config } from '../../../../env/config';\nimport { RootState, RootDispatch } from '../../../../store';\nimport { setSelectedPrimaryFocusBuildRequest } from '../../../../store/selected/slice';\nimport {\n  factoryBuildRequestsSelector,\n  isAllowedToBidSelector,\n} from '../../../../store/factory/selectors';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Card, Typography, CardContent } from '@material-ui/core';\n\nfunction mapState(state: RootState) {\n  return {\n    buildRequests: factoryBuildRequestsSelector(state),\n    isAllowedToBid: isAllowedToBidSelector(state),\n  };\n}\n\nfunction mapDispatch(dispatch: RootDispatch) {\n  return {\n    onActiveBuildRequestSelected: (id: string) => {\n      dispatch(setSelectedPrimaryFocusBuildRequest(id));\n    },\n  };\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst useStyles = makeStyles((_theme) => ({\n  container: {\n    flexGrow: 1,\n  },\n  title: {\n    fontSize: 14,\n  },\n  comment: {\n    fontSize: 12,\n  },\n}));\n\nfunction ActiveBuildRequestsSummary(props: Props): JSX.Element {\n  const classes = useStyles();\n\n  const {\n    buildRequests: activeBuildRequests,\n    isAllowedToBid,\n    onActiveBuildRequestSelected,\n  } = props;\n\n  return (\n    <Card className={classes.container}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          Active Build Requests\n        </Typography>\n        {!isAllowedToBid ? (\n          <Typography\n            className={classes.title}\n            color=\"textSecondary\"\n            gutterBottom\n          >\n            (at max factory capacity: {config.factory.maxNumberActiveBuilds})\n          </Typography>\n        ) : (\n          <div />\n        )}\n        {activeBuildRequests.length > 0 ? (\n          activeBuildRequests.map((activeBuildRequest) => (\n            <div key={activeBuildRequest.id}>\n              <Typography color=\"textPrimary\">\n                {activeBuildRequest.displayName}\n              </Typography>\n              <Typography color=\"textSecondary\" gutterBottom>\n                {activeBuildRequest.id}\n              </Typography>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"small\"\n                onClick={(_) =>\n                  onActiveBuildRequestSelected(activeBuildRequest.id)\n                }\n              >\n                Details\n              </Button>\n            </div>\n          ))\n        ) : (\n          <Typography\n            className={classes.comment}\n            color=\"textPrimary\"\n            gutterBottom\n          >\n            No active build requests... Bid from the market panel?\n          </Typography>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default connector(ActiveBuildRequestsSummary);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { RootState, RootDispatch } from '../../../../store';\nimport { factoryEconomicSummarySelector } from '../../../../store/factory/selectors';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, Typography, CardContent } from '@material-ui/core';\nimport { dollarFormatter } from '../../../../store/economic/factories';\n\nfunction mapState(state: RootState) {\n  return {\n    factoryEconomicSummary: factoryEconomicSummarySelector(state),\n  };\n}\n\nfunction mapDispatch(_dispatch: RootDispatch) {\n  return {};\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst useStyles = makeStyles((_theme) => ({\n  container: {\n    flexGrow: 1,\n  },\n  title: {\n    fontSize: 14,\n  },\n}));\n\nfunction FactoryEconomicSummary(props: Props): JSX.Element {\n  const classes = useStyles();\n  const { factoryEconomicSummary } = props;\n\n  return (\n    <Card className={classes.container}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          Economic Summary\n        </Typography>\n        <Typography color=\"textPrimary\">\n          Liquid Assets:{' '}\n          {dollarFormatter.format(\n            factoryEconomicSummary.currentAssetsValue.value.dollars\n          )}\n        </Typography>\n        <Typography color=\"textPrimary\">\n          Total In:{' '}\n          {dollarFormatter.format(factoryEconomicSummary.totalIn.value.dollars)}\n        </Typography>\n        <Typography color=\"textPrimary\">\n          Total Out:{' '}\n          {dollarFormatter.format(\n            factoryEconomicSummary.totalOut.value.dollars\n          )}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default connector(FactoryEconomicSummary);\n","import {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootDispatch, RootState } from '../../../store';\nimport { factoryIdentitySelector } from '../../../store/factory/selectors';\nimport { setMarketFactoryPanelVisibilty } from '../../../store/selected/slice';\nimport { MarketFactoryPanelVisibilty } from '../../../store/selected/types';\nimport ActiveBuildRequestsSummary from './panel/ActiveBuildRequestsSummary';\nimport FactoryEconomicSummary from './panel/FactoryEconomicSummary';\n\nfunction mapState(state: RootState) {\n  return {\n    factoryIdentity: factoryIdentitySelector(state),\n  };\n}\n\nfunction mapDispatch(dispatch: RootDispatch) {\n  return {\n    onCloseClicked: () => {\n      dispatch(\n        setMarketFactoryPanelVisibilty(MarketFactoryPanelVisibilty.None)\n      );\n    },\n  };\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    margin: theme.spacing(2),\n    flexGrow: 1,\n    overflow: 'auto',\n    maxHeight: '90vh', // Couldn't find a nicer way. Be cool if I could reference the max height of\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n}));\n\nfunction FactoryPanel(props: Props): JSX.Element {\n  const classes = useStyles();\n\n  const { factoryIdentity, onCloseClicked } = props;\n\n  return (\n    <Card className={classes.container}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          Factory Overview\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {factoryIdentity.displayName}\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          {factoryIdentity.id}\n        </Typography>\n        <FactoryEconomicSummary />\n        <ActiveBuildRequestsSummary />\n      </CardContent>\n      <CardActions>\n        <Button color=\"primary\" size=\"small\" onClick={onCloseClicked}>\n          Close\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default connector(FactoryPanel);\n","import { Card, makeStyles } from '@material-ui/core';\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { config } from '../../../env/config';\nimport { GitHubLatestReleaseAPIResponse } from '../../../store/information/types';\n\nconst useStyles = makeStyles((theme) => ({\n  InformationOverlay: {\n    width: '50%',\n    padding: theme.spacing(2),\n  },\n}));\n\nexport function InformationOverlay() {\n  const classes = useStyles();\n  const [info, setInfo] = useState('Retriving release information...');\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(\n        config.information.gitHubAPILatestReleaseEndPoint\n      );\n      if (result.status === 200) {\n        const releaseResponse = result.data as GitHubLatestReleaseAPIResponse;\n        setInfo(releaseResponse.body);\n      } else {\n        setInfo(\n          `Unabled to get release information :( (status: ${result.status})`\n        );\n      }\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <Card id=\"InformationOverlay\" className={classes.InformationOverlay}>\n      <ReactMarkdown source={info} />\n    </Card>\n  );\n}\n","import { Card, CardContent, makeStyles, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../store';\nimport { userIdentityPublicKeySelector } from '../../../store/textile/selectors';\n\nfunction mapState(state: RootState) {\n  return {\n    userIdentityPublicKey: userIdentityPublicKeySelector(state),\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  UserDetailsOverlay: {\n    width: '75%',\n    padding: theme.spacing(2),\n  },\n}));\n\nconst connector = connect(mapState);\n\ntype Props = ConnectedProps<typeof connector>;\n\nfunction UserDetailsOverlay(props: Props) {\n  const classes = useStyles();\n  const { userIdentityPublicKey } = props;\n\n  return (\n    <Card id=\"UserDetailsOverlay\" className={classes.UserDetailsOverlay}>\n      <CardContent>\n        <Typography>\n          Public Key\n          <br />\n          {userIdentityPublicKey}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default connector(UserDetailsOverlay);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { RootDispatch } from '../../../store';\nimport { BuildRequest } from '../../../store/buildrequest/types';\nimport { requestBidBuildRequest } from '../../../store/market/slice';\nimport { Button, Card, Grid } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\n\nfunction mapDispatch(dispatch: RootDispatch) {\n  return {\n    onBidClicked: (buildRequest: BuildRequest) => {\n      dispatch(requestBidBuildRequest(buildRequest));\n    },\n  };\n}\n\nconst connector = connect(null, mapDispatch);\n\ninterface OwnProps {\n  isAllowedToBid: boolean;\n  buildRequest: BuildRequest;\n}\n\ntype Props = ConnectedProps<typeof connector> & OwnProps;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: 'relative',\n    width: '100%',\n    padding: theme.spacing(2),\n  },\n  title: {\n    fontSize: 14,\n  },\n  subTitle: {\n    fontSize: 11,\n    marginBottom: theme.spacing(2),\n  },\n  footer: {\n    marginTop: theme.spacing(2),\n  },\n  comment: {\n    fontSize: 11,\n  },\n}));\n\nfunction BuildRequestElement(props: Props) {\n  const classes = useStyles();\n  const { isAllowedToBid, onBidClicked } = props;\n  const { id, displayName, created, fixedValue } = props.buildRequest;\n\n  return (\n    <Card className={classes.root}>\n      <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n        Build Request\n      </Typography>\n      <Typography variant=\"h5\" component=\"h2\">\n        {displayName}\n      </Typography>\n      <Typography className={classes.subTitle} color=\"textSecondary\">\n        {id}\n      </Typography>\n      <Typography color=\"textSecondary\">\n        Created: {created.toLocaleTimeString()}\n      </Typography>\n\n      <Grid\n        className={classes.footer}\n        container\n        spacing={2}\n        direction=\"row\"\n        justify=\"flex-start\"\n        alignItems=\"center\"\n      >\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n            onClick={(_) => onBidClicked(props.buildRequest)}\n            disabled={!isAllowedToBid}\n          >\n            Bid\n          </Button>\n        </Grid>\n        <Grid item>\n          <Typography color=\"textSecondary\">\n            Value: ${fixedValue.value.dollars}\n          </Typography>\n        </Grid>\n      </Grid>\n      {!isAllowedToBid && (\n        <Typography className={classes.comment} color=\"textSecondary\">\n          Bidding disabled - factory at max capacity\n        </Typography>\n      )}\n    </Card>\n  );\n}\n\nexport default connector(BuildRequestElement);\n","import React, { useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { animated, useTransition } from 'react-spring';\n\nimport { RootState } from '../../../store';\nimport { buildRequestsSelector } from '../../../store/market/selectors';\nimport { isAllowedToBidSelector } from '../../../store/factory/selectors';\n\nimport { Box } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BuildRequest from './BuildRequestSummary';\n\nfunction mapState(state: RootState) {\n  return {\n    buildRequests: buildRequestsSelector(state),\n    isAllowedToBid: isAllowedToBidSelector(state),\n  };\n}\n\nconst connector = connect(mapState);\n\ntype Props = ConnectedProps<typeof connector> & {\n  width: number | null;\n  height: number | null;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(2),\n    flexGrow: 1,\n    width: '100%',\n    overflow: 'auto',\n    maxHeight: '80vh', // Couldn't find a nicer way. Be cool if I could reference the max height of\n  },\n  card: {\n    position: 'absolute',\n    paddingRight: theme.spacing(4),\n  },\n}));\n\nfunction MarketPanel(panelProps: Props): JSX.Element {\n  const classes = useStyles();\n  const { buildRequests, isAllowedToBid, width } = panelProps;\n\n  const defaultElementHeight = 240; // TODO: Fix this to read / be aware of contents height.\n  const [elementHeight] = useState(defaultElementHeight);\n\n  let cumulativeHeight = 0; // Cumulative height\n  const transBuildRequests = useTransition(\n    buildRequests.map((buildRequest) => ({\n      ...buildRequest,\n      y: (cumulativeHeight += elementHeight) - elementHeight,\n      height: elementHeight,\n    })),\n    (buildRequest) => buildRequest.id,\n    {\n      from: { height: 0, opacity: 0 },\n      leave: { height: 0, opacity: 0 },\n      enter: ({ y, height }) => ({ y, height, opacity: 1 }),\n      update: ({ y, height }) => ({ y, height }),\n      config: { tension: 500 },\n    }\n  );\n\n  return (\n    <Box className={classes.container}>\n      {/* eslint-disable-next-line @typescript-eslint/no-explicit-any */}\n      {transBuildRequests.map(({ item, props, key }: any) => (\n        <animated.div\n          key={key}\n          className={classes.card}\n          style={{\n            transform: props.y.interpolate(\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              (y: any) => `translate3d(0,${y}px,0)`\n            ),\n            opacity: props.opacity,\n            height: props.height,\n            width: width === null ? undefined : width,\n          }}\n        >\n          <BuildRequest isAllowedToBid={isAllowedToBid} buildRequest={item} />\n        </animated.div>\n      ))}\n    </Box>\n  );\n}\n\nexport default connector(MarketPanel);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../../store';\nimport { selectedServiceProviderSelector } from '../../../../../store/selected/selectors';\n\nimport { Typography, makeStyles } from '@material-ui/core';\n\nfunction mapState(state: RootState) {\n  return {\n    selected: selectedServiceProviderSelector(state),\n  };\n}\n\nconst connector = connect(mapState);\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst useStyles = makeStyles((_) => ({\n  pos: {\n    marginBottom: 12,\n  },\n}));\n\nfunction IdentityForm(props: Props) {\n  const { selected } = props;\n  const classes = useStyles();\n  if (!selected) return null;\n  return (\n    <div>\n      <Typography variant=\"h5\" component=\"h2\">\n        {selected.displayName}\n      </Typography>\n      <Typography className={classes.pos} color=\"textSecondary\">\n        {selected.id}\n      </Typography>\n    </div>\n  );\n}\n\nexport default connector(IdentityForm);\n","import { Identity } from '../identity/types';\n\nexport enum ParameterType {\n  String,\n  Number,\n}\n\ninterface ParameterBase extends Identity {\n  type: ParameterType;\n  units: string;\n}\n\nexport interface NumberParameter extends ParameterBase {\n  value: number;\n}\n\nexport interface StringParameter extends ParameterBase {\n  value: string;\n}\n\nexport type Parameter = NumberParameter | StringParameter;\n","import { NumberParameter, ParameterType, StringParameter } from './types';\nimport { createUuid } from '../identity/factories';\n\nexport function createNumberParameter({\n  id = createUuid(),\n  displayName = 'default-number-parameter',\n  units = '',\n  value = 0,\n} = {}): NumberParameter {\n  return {\n    type: ParameterType.Number,\n    id,\n    displayName,\n    units,\n    value,\n  };\n}\n\nexport function createStringParameter({\n  id = createUuid(),\n  displayName = 'default-string-parameter',\n  units = '',\n  value = '',\n} = {}): StringParameter {\n  return {\n    type: ParameterType.String,\n    id,\n    displayName,\n    units,\n    value,\n  };\n}\n","import React from 'react';\nimport { BasicParameterProps } from './types';\nimport { TextField, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  field: {\n    margin: theme.spacing(1),\n    flexGrow: 1,\n  },\n}));\n\nexport function BasicParameter(props: BasicParameterProps): JSX.Element {\n  const { input, displayName } = props;\n  const classes = useStyles();\n  return <TextField className={classes.field} label={displayName} {...input} />;\n}\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { reduxForm, InjectedFormProps, Field } from 'redux-form';\n\nimport { RootState, RootDispatch } from '../../../../../store';\nimport { ReduxFormParameterUpdate } from '../../../../../store/selected/types';\nimport { createNumberParameter } from '../../../../../store/common/parameter/factories';\nimport {\n  selectedServiceProviderSelector,\n  selectedServiceProviderLocationSelector,\n} from '../../../../../store/selected/selectors';\nimport { setServiceProviderParameter } from '../../../../../store/factory/slice';\n\nimport { Grid } from '@material-ui/core';\nimport { BasicParameter } from '../parameter/BasicParameter';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nfunction mapState(state: RootState) {\n  return {\n    selectedServiceProvider: selectedServiceProviderSelector(state),\n    initialValues: selectedServiceProviderLocationSelector(state),\n  };\n}\n\nfunction mapDispatch(dispatch: RootDispatch) {\n  return {\n    onNumberParameterChange: (\n      selectedServiceProviderId: string,\n      serviceProviderProperty: string[],\n      parameterUpdate: ReduxFormParameterUpdate,\n      units: string\n    ) => {\n      console.log(\n        `Parameter ${parameterUpdate.target.name} Changed to ${parameterUpdate.target.value}`\n      );\n      dispatch(\n        setServiceProviderParameter({\n          serviceProviderId: selectedServiceProviderId,\n          serviceProviderProperty,\n          parameter: createNumberParameter({\n            id: parameterUpdate.target.name,\n            displayName: parameterUpdate.target.name,\n            units: units,\n            value: Number(parameterUpdate.target.value),\n          }),\n        })\n      );\n    },\n  };\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype Props = ConnectedProps<typeof connector>;\n\nfunction LocationForm(props: Props & InjectedFormProps<unknown, Props>) {\n  const { selectedServiceProvider, onNumberParameterChange } = props;\n\n  if (!selectedServiceProvider) return <div />;\n\n  const fixedProps = {\n    title: 'Location',\n    name: 'location',\n    units: 'm',\n  };\n\n  return (\n    <ExpansionPanel>\n      <ExpansionPanelSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls={fixedProps.name}\n        id={fixedProps.name}\n      >\n        <Typography>{fixedProps.title}</Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails>\n        <form>\n          <Grid container>\n            {Object.keys(selectedServiceProvider.location).map((key) => {\n              return (\n                <Grid key={key} item xs={4}>\n                  <Field\n                    name={key}\n                    displayName={`${key.toUpperCase()} (${fixedProps.units})`}\n                    component={BasicParameter}\n                    type=\"number\"\n                    parse={(value: string) => Number(value)}\n                    onChange={(change: ReduxFormParameterUpdate) =>\n                      onNumberParameterChange(\n                        selectedServiceProvider.id,\n                        [fixedProps.name, key],\n                        change,\n                        fixedProps.units\n                      )\n                    }\n                  />\n                </Grid>\n              );\n            })}\n          </Grid>\n        </form>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n}\n\nexport default connector(\n  reduxForm<unknown, Props>({\n    form: 'locationForm',\n    enableReinitialize: true,\n  })(LocationForm)\n);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { reduxForm, InjectedFormProps, Field } from 'redux-form';\n\nimport { RootState, RootDispatch } from '../../../../../store';\nimport { ReduxFormParameterUpdate } from '../../../../../store/selected/types';\nimport { createNumberParameter } from '../../../../../store/common/parameter/factories';\nimport {\n  selectedServiceProviderSelector,\n  selectedServiceProviderOrientationSelector,\n} from '../../../../../store/selected/selectors';\nimport { setServiceProviderParameter } from '../../../../../store/factory/slice';\n\nimport { Grid } from '@material-ui/core';\nimport { BasicParameter } from '../parameter/BasicParameter';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nfunction mapState(state: RootState) {\n  return {\n    selectedServiceProvider: selectedServiceProviderSelector(state),\n    initialValues: selectedServiceProviderOrientationSelector(state),\n  };\n}\n\nfunction mapDispatch(dispatch: RootDispatch) {\n  return {\n    onNumberParameterChange: (\n      selectedServiceProviderId: string,\n      serviceProviderProperty: string[],\n      parameterUpdate: ReduxFormParameterUpdate,\n      units: string\n    ) => {\n      console.log(\n        `Parameter ${parameterUpdate.target.name} Changed to ${parameterUpdate.target.value}`\n      );\n      dispatch(\n        setServiceProviderParameter({\n          serviceProviderId: selectedServiceProviderId,\n          serviceProviderProperty,\n          parameter: createNumberParameter({\n            id: parameterUpdate.target.name,\n            displayName: parameterUpdate.target.name,\n            units: units,\n            value: Number(parameterUpdate.target.value),\n          }),\n        })\n      );\n    },\n  };\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype Props = ConnectedProps<typeof connector>;\n\nfunction OrientationForm(props: Props & InjectedFormProps<unknown, Props>) {\n  const { selectedServiceProvider, onNumberParameterChange } = props;\n\n  if (!selectedServiceProvider) return <div />;\n\n  const fixedProps = {\n    title: 'Orientation',\n    name: 'orientation',\n    units: '',\n  };\n\n  return (\n    <ExpansionPanel>\n      <ExpansionPanelSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls={fixedProps.name}\n        id={fixedProps.name}\n      >\n        <Typography>{fixedProps.title}</Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails>\n        <form>\n          <Grid container>\n            {Object.keys(selectedServiceProvider.orientation).map((key) => {\n              return (\n                <Grid key={key} item xs={3}>\n                  <Field\n                    name={key}\n                    displayName={`${key.toUpperCase()}`}\n                    component={BasicParameter}\n                    type=\"number\"\n                    parse={(value: string) => Number(value)}\n                    onChange={(change: ReduxFormParameterUpdate) =>\n                      onNumberParameterChange(\n                        selectedServiceProvider.id,\n                        [fixedProps.name, key],\n                        change,\n                        fixedProps.units\n                      )\n                    }\n                  />\n                </Grid>\n              );\n            })}\n          </Grid>\n        </form>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n}\n\nexport default connector(\n  reduxForm<unknown, Props>({\n    form: 'orientationForm',\n    enableReinitialize: true,\n  })(OrientationForm)\n);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { RootState } from '../../../store';\nimport { selectedServiceProviderSelector } from '../../../store/selected/selectors';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, Typography, CardContent } from '@material-ui/core';\nimport IdentityForm from './form/entity/IdentityForm';\nimport LocationForm from './form/entity/LocationForm';\nimport OrientationForm from './form/entity/OrientationForm';\n\nfunction mapState(state: RootState) {\n  return {\n    selected: selectedServiceProviderSelector(state),\n  };\n}\n\nconst connector = connect(mapState);\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    margin: theme.spacing(2),\n    flexGrow: 1,\n    overflow: 'auto',\n    maxHeight: '80vh', // Couldn't find a nicer way. Be cool if I could reference the max height of\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n}));\n\nfunction SelectedPanel(props: Props): JSX.Element {\n  const classes = useStyles();\n\n  const { selected } = props;\n\n  if (!selected) {\n    return <div />;\n  }\n\n  return (\n    <Card className={classes.container}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          Properties\n        </Typography>\n        <IdentityForm />\n        <LocationForm />\n        <OrientationForm />\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default connector(SelectedPanel);\n","import {\n  AppBar,\n  Box,\n  IconButton,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport InfoIcon from '@material-ui/icons/Info';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport TimelineIcon from '@material-ui/icons/Timeline';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { config } from '../../env/config';\nimport { RootDispatch, RootState } from '../../store';\nimport { showUserDetails } from '../../store/textile/slice';\nimport { factoryIdentitySelector } from '../../store/factory/selectors';\nimport { showInformationOverlay } from '../../store/information/slice';\nimport { marketFactoryPanelVisibiltySelector } from '../../store/selected/selectors';\nimport { setMarketFactoryPanelVisibilty } from '../../store/selected/slice';\nimport { MarketFactoryPanelVisibilty } from '../../store/selected/types';\n\nfunction mapState(state: RootState) {\n  return {\n    marketFactoryPanelVisibilty: marketFactoryPanelVisibiltySelector(state),\n    factoryIdentity: factoryIdentitySelector(state),\n  };\n}\n\nfunction mapDispatch(dispatch: RootDispatch) {\n  return {\n    onFactoryClicked: () => {\n      dispatch(\n        setMarketFactoryPanelVisibilty(MarketFactoryPanelVisibilty.Factory)\n      );\n    },\n    onMarketClicked: () => {\n      dispatch(\n        setMarketFactoryPanelVisibilty(MarketFactoryPanelVisibilty.Market)\n      );\n    },\n    onShowInfoPanel: () => {\n      dispatch(showInformationOverlay());\n    },\n    onShowUserInfo: () => {\n      dispatch(showUserDetails());\n    },\n  };\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(2),\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction TopNav(props: Props): JSX.Element {\n  const classes = useStyles();\n  const {\n    marketFactoryPanelVisibilty,\n    factoryIdentity,\n    onFactoryClicked,\n    onMarketClicked,\n    onShowInfoPanel,\n    onShowUserInfo,\n  } = props;\n\n  return (\n    <Box className={classes.container}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"factory\"\n            disabled={\n              marketFactoryPanelVisibilty ===\n              MarketFactoryPanelVisibilty.Factory\n            }\n            onClick={onFactoryClicked}\n          >\n            <BusinessIcon />\n          </IconButton>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"market\"\n            disabled={\n              marketFactoryPanelVisibilty === MarketFactoryPanelVisibilty.Market\n            }\n            onClick={onMarketClicked}\n          >\n            <TimelineIcon />\n          </IconButton>\n\n          <Typography variant=\"h6\" className={classes.title}>\n            {factoryIdentity.displayName} : {factoryIdentity.id}\n          </Typography>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"github\"\n            href={config.topNav.gitHubURL}\n          >\n            <GitHubIcon />\n          </IconButton>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"info\"\n            onClick={onShowInfoPanel}\n          >\n            <InfoIcon />\n          </IconButton>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"user\"\n            onClick={onShowUserInfo}\n          >\n            <AccountCircleIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n    </Box>\n  );\n}\n\nexport default connector(TopNav);\n","import Ipfs from 'ipfs';\nimport { useEffect, useState } from 'react';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet ipfs: any = null;\n\n/*\n * A quick demo using React hooks to create an ipfs instance.\n *\n * Hooks are brand new at the time of writing, and this pattern\n * is intended to show it is possible. I don't know if it is wise.\n *\n * Next steps would be to store the ipfs instance on the context\n * so use-ipfs calls can grab it from there rather than expecting\n * it to be passed in.\n */\nexport default function useIpfsFactory() {\n  const [isIpfsReady, setIpfsReady] = useState(Boolean(ipfs));\n  const [ipfsInitError, setIpfsInitError] = useState(null);\n\n  useEffect(() => {\n    // The fn to useEffect should not return anything other than a cleanup fn,\n    // So it cannot be marked async, which causes it to return a promise,\n    // Hence we delegate to a async fn rather than making the param an async fn.\n    async function startIpfs() {\n      if (ipfs) {\n        console.log('IPFS already started');\n      } else {\n        try {\n          console.time('IPFS Started');\n          ipfs = await Ipfs.create();\n          console.timeEnd('IPFS Started');\n        } catch (error) {\n          console.error('IPFS init error:', error);\n          ipfs = null;\n          setIpfsInitError(error);\n        }\n      }\n\n      setIpfsReady(Boolean(ipfs));\n    }\n\n    startIpfs();\n    return function cleanup() {\n      if (ipfs && ipfs.stop) {\n        console.log('Stopping IPFS');\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ipfs.stop().catch((err: any) => console.error(err));\n        ipfs = null;\n        setIpfsReady(false);\n      }\n    };\n  }, []);\n\n  return { ipfs, isIpfsReady, ipfsInitError };\n}\n","import { Backdrop, Box } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { SizeMe } from 'react-sizeme';\nimport { RootDispatch, RootState } from '../../store';\nimport { userIdentityDetailsOverlayVisibleSelector } from '../../store/textile/selectors';\nimport { hideUserDetails } from '../../store/textile/slice';\nimport { informationOverlayVisibleSelector } from '../../store/information/selectors';\nimport { hideInformationOverlay } from '../../store/information/slice';\nimport {\n  marketFactoryPanelVisibiltySelector,\n  primaryFocusBuildRequestSelector,\n} from '../../store/selected/selectors';\nimport { MarketFactoryPanelVisibilty } from '../../store/selected/types';\nimport BuildRequestDetails from './buildrequest/BuildRequestDetails';\nimport Factory from './factory/Factory';\nimport FactoryPanel from './factory/FactoryPanel';\nimport { InformationOverlay } from './information/InformationOverlay';\nimport UserDetailsOverlay from './textile/UserDetailsOverlay';\nimport MarketPanel from './market/MarketPanel';\nimport SelectedPanel from './selected/SelectedPanel';\nimport TopNav from './TopNav';\nimport useIpfsFactory from '../../store/ipfs/use-ipfs-factory';\nimport { IpfsContext } from '../../store/ipfs/IpfsContext';\n\nfunction mapState(state: RootState) {\n  return {\n    informationOverlayVisible: informationOverlayVisibleSelector(state),\n    userIdentityDetailsOverlayVisible: userIdentityDetailsOverlayVisibleSelector(\n      state\n    ),\n    marketFactoryPanelVisibilty: marketFactoryPanelVisibiltySelector(state),\n    primaryFocusBuildRequest: primaryFocusBuildRequestSelector(state),\n  };\n}\n\nfunction mapDispatch(dispatch: RootDispatch) {\n  return {\n    onHideInfoPanel: () => {\n      dispatch(hideInformationOverlay());\n    },\n    onHideUserDetailsPanel: () => {\n      dispatch(hideUserDetails());\n    },\n  };\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst useStyles = makeStyles((theme) => ({\n  '@global': {\n    '*::-webkit-scrollbar': {\n      width: '0.4em',\n    },\n    '*::-webkit-scrollbar-track': {\n      '-webkit-box-shadow': 'inset 0 0 6px rgba(0,0,0,0.00)',\n    },\n    '*::-webkit-scrollbar-thumb': {\n      backgroundColor: 'rgba(0,0,0,.1)',\n      outline: '1px solid slategrey',\n    },\n  },\n  fullScreen: {\n    margin: 0,\n    height: '100vh',\n    width: '100vw',\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n    pointerEvents: 'auto',\n  },\n  uiOverlay: {\n    position: 'fixed' /* Sit on top of the page content */,\n    top: 0,\n    left: 0,\n    right: 0,\n    pointerEvents: 'none',\n    height: '100vh',\n    maxHeight: '100vh',\n  },\n  uiPrimaryGridContainer: {\n    justify: 'flex-start',\n  },\n  uiPrimaryGridElement: {\n    pointerEvents: 'auto',\n  },\n}));\n\nfunction App(props: Props): JSX.Element {\n  const classes = useStyles();\n  const { ipfs } = useIpfsFactory();\n\n  const {\n    informationOverlayVisible,\n    userIdentityDetailsOverlayVisible,\n    marketFactoryPanelVisibilty,\n    primaryFocusBuildRequest,\n    onHideInfoPanel,\n    onHideUserDetailsPanel,\n  } = props;\n\n  const MarketFactoryPanel = () => {\n    switch (marketFactoryPanelVisibilty) {\n      case MarketFactoryPanelVisibilty.Factory:\n        return (\n          <Grid item xs={3}>\n            <Box className={classes.uiPrimaryGridElement}>\n              <FactoryPanel />\n            </Box>\n          </Grid>\n        );\n      case MarketFactoryPanelVisibilty.Market:\n        return (\n          <Grid item xs={3}>\n            <SizeMe>\n              {({ size }) => (\n                <Box className={classes.uiPrimaryGridElement}>\n                  <MarketPanel height={size.height} width={size.width} />\n                </Box>\n              )}\n            </SizeMe>\n          </Grid>\n        );\n      default:\n        return <Grid item xs={3}></Grid>;\n    }\n  };\n\n  const PrimaryFocusPanel = () => {\n    if (primaryFocusBuildRequest) {\n      return (\n        <Grid item xs={6}>\n          <Box className={classes.uiPrimaryGridElement}>\n            <BuildRequestDetails />\n          </Box>\n        </Grid>\n      );\n    } else {\n      return <Grid item xs={6}></Grid>;\n    }\n  };\n\n  return (\n    <IpfsContext.Provider value={ipfs}>\n      <Box className={classes.fullScreen}>\n        <Factory />\n        <Box className={classes.uiOverlay}>\n          <Grid container className={classes.uiPrimaryGridContainer}>\n            <Grid item xs={12}>\n              <div className={classes.uiPrimaryGridElement}>\n                <TopNav />\n              </div>\n            </Grid>\n            <MarketFactoryPanel />\n            <PrimaryFocusPanel />\n            <Grid item xs={3}>\n              <div className={classes.uiPrimaryGridElement}>\n                <SelectedPanel />\n              </div>\n            </Grid>\n          </Grid>\n          <Backdrop\n            className={classes.backdrop}\n            open={informationOverlayVisible}\n            onClick={onHideInfoPanel}\n          >\n            <InformationOverlay />\n          </Backdrop>\n          <Backdrop\n            className={classes.backdrop}\n            open={userIdentityDetailsOverlayVisible}\n            onClick={onHideUserDetailsPanel}\n          >\n            <UserDetailsOverlay />\n          </Backdrop>\n        </Box>\n      </Box>\n    </IpfsContext.Provider>\n  );\n}\n\nexport default connector(App);\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport App from './views/components/App';\nimport { theme } from './views/theme';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}